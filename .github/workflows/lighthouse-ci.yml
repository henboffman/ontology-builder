name: Lighthouse CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  # Allow manual trigger
  workflow_dispatch:
  # Run weekly to track performance over time
  schedule:
    - cron: '0 0 * * 0'  # Every Sunday at midnight

jobs:
  lighthouse-desktop:
    name: Lighthouse CI (Desktop)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore dependencies
        run: dotnet restore
        working-directory: ./onto-editor/eidos

      - name: Build application
        run: dotnet build --no-restore --configuration Release
        working-directory: ./onto-editor/eidos

      - name: Start application
        run: |
          dotnet run --no-build --configuration Release &
          echo $! > app.pid
        working-directory: ./onto-editor/eidos
        env:
          ASPNETCORE_ENVIRONMENT: Production
          ASPNETCORE_URLS: http://localhost:5000

      - name: Wait for application to start
        run: |
          echo "Waiting for application to start..."
          for i in {1..30}; do
            if curl -f http://localhost:5000 > /dev/null 2>&1; then
              echo "Application is running!"
              break
            fi
            echo "Attempt $i/30: Application not ready yet..."
            sleep 2
          done
          curl -f http://localhost:5000 || (echo "Application failed to start" && exit 1)

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Lighthouse CI
        run: npm ci
        working-directory: ./onto-editor/eidos

      - name: Run Lighthouse CI (Desktop)
        run: npm run lighthouse
        working-directory: ./onto-editor/eidos

      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-results-desktop
          path: ./onto-editor/eidos/.lighthouseci
          retention-days: 30

      - name: Stop application
        if: always()
        run: |
          if [ -f app.pid ]; then
            kill $(cat app.pid) || true
          fi
        working-directory: ./onto-editor/eidos

  lighthouse-mobile:
    name: Lighthouse CI (Mobile)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore dependencies
        run: dotnet restore
        working-directory: ./onto-editor/eidos

      - name: Build application
        run: dotnet build --no-restore --configuration Release
        working-directory: ./onto-editor/eidos

      - name: Start application
        run: |
          dotnet run --no-build --configuration Release &
          echo $! > app.pid
        working-directory: ./onto-editor/eidos
        env:
          ASPNETCORE_ENVIRONMENT: Production
          ASPNETCORE_URLS: http://localhost:5000

      - name: Wait for application to start
        run: |
          echo "Waiting for application to start..."
          for i in {1..30}; do
            if curl -f http://localhost:5000 > /dev/null 2>&1; then
              echo "Application is running!"
              break
            fi
            echo "Attempt $i/30: Application not ready yet..."
            sleep 2
          done
          curl -f http://localhost:5000 || (echo "Application failed to start" && exit 1)

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Lighthouse CI
        run: npm ci
        working-directory: ./onto-editor/eidos

      - name: Run Lighthouse CI (Mobile)
        run: npm run lighthouse:mobile
        working-directory: ./onto-editor/eidos

      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-results-mobile
          path: ./onto-editor/eidos/.lighthouseci
          retention-days: 30

      - name: Stop application
        if: always()
        run: |
          if [ -f app.pid ]; then
            kill $(cat app.pid) || true
          fi
        working-directory: ./onto-editor/eidos

  comment-pr:
    name: Comment on PR
    runs-on: ubuntu-latest
    needs: [lighthouse-desktop, lighthouse-mobile]
    if: github.event_name == 'pull_request'
    steps:
      - name: Download Desktop results
        uses: actions/download-artifact@v4
        with:
          name: lighthouse-results-desktop
          path: ./lighthouse-desktop

      - name: Download Mobile results
        uses: actions/download-artifact@v4
        with:
          name: lighthouse-results-mobile
          path: ./lighthouse-mobile

      - name: Comment PR with results
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            // Read desktop results
            const desktopFiles = fs.readdirSync('./lighthouse-desktop');
            const desktopManifest = JSON.parse(
              fs.readFileSync(`./lighthouse-desktop/${desktopFiles.find(f => f.endsWith('manifest.json'))}`)
            );

            // Read mobile results
            const mobileFiles = fs.readdirSync('./lighthouse-mobile');
            const mobileManifest = JSON.parse(
              fs.readFileSync(`./lighthouse-mobile/${mobileFiles.find(f => f.endsWith('manifest.json'))}`)
            );

            // Format comment
            const comment = `## ðŸš¦ Lighthouse CI Results

            ### Desktop Performance
            ${desktopManifest.map(result => {
              const scores = result.summary;
              return `
            **${result.url}**
            - Performance: ${Math.round(scores.performance * 100)}
            - Accessibility: ${Math.round(scores.accessibility * 100)}
            - Best Practices: ${Math.round(scores['best-practices'] * 100)}
            - SEO: ${Math.round(scores.seo * 100)}
              `;
            }).join('\n')}

            ### Mobile Performance
            ${mobileManifest.map(result => {
              const scores = result.summary;
              return `
            **${result.url}**
            - Performance: ${Math.round(scores.performance * 100)}
            - Accessibility: ${Math.round(scores.accessibility * 100)}
            - Best Practices: ${Math.round(scores['best-practices'] * 100)}
            - SEO: ${Math.round(scores.seo * 100)}
              `;
            }).join('\n')}

            [View full reports in artifacts](${context.payload.pull_request.html_url}/checks)
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
