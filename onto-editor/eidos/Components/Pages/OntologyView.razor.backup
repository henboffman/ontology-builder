@page "/ontology/{id:int}"
@using OntologyBuilder.Models
@using OntologyBuilder.Services
@using OntologyBuilder.Components.Shared
@using VDS.RDF
@using Microsoft.JSInterop
@inject OntologyService OntologyService
@inject TtlImportService TtlImportService
@inject TtlExportService TtlExportService
@inject NavigationManager Navigation
@inject IJSRuntime JS
@rendermode InteractiveServer

<PageTitle>@(ontology?.Name ?? "Ontology")</PageTitle>

@if (ontology == null)
{
    <div class="text-center p-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-2">Loading ontology...</p>
    </div>
}
else
{
    <div class="container-fluid mt-3">
        <!-- Header -->
        <div class="row mb-3">
            <div class="col-md-12">
                <div class="d-flex justify-content-between align-items-start">
                    <div>
                        <button class="btn btn-sm btn-outline-secondary mb-2" @onclick="GoBack">
                            <i class="bi bi-arrow-left"></i> Back to Dashboard
                        </button>
                        <h2>@ontology.Name</h2>
                        @if (!string.IsNullOrWhiteSpace(ontology.Description))
                        {
                            <p class="text-muted">@ontology.Description</p>
                        }
                        @if (!string.IsNullOrWhiteSpace(ontology.Tags))
                        {
                            <div class="mb-2">
                                @foreach (var tag in ontology.Tags.Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries))
                                {
                                    <span class="badge bg-info me-1">@tag</span>
                                }
                            </div>
                        }
                        <div class="d-flex gap-3 text-muted small">
                            <span><i class="bi bi-circle-fill"></i> @ontology.Concepts.Count concepts</span>
                            <span><i class="bi bi-arrow-left-right"></i> @ontology.Relationships.Count relationships</span>
                            @if (!string.IsNullOrWhiteSpace(ontology.Author))
                            {
                                <span><i class="bi bi-person"></i> @ontology.Author</span>
                            }
                            @if (!string.IsNullOrWhiteSpace(ontology.Version))
                            {
                                <span><i class="bi bi-tag"></i> v@ontology.Version</span>
                            }
                        </div>
                    </div>
                    <div class="d-flex gap-2 align-items-center flex-wrap">
                        @if (viewMode != ViewMode.Ttl)
                        {
                            <div class="input-group" style="width: 300px;">
                                <span class="input-group-text">
                                    <i class="bi bi-search"></i>
                                </span>
                                <input type="text" class="form-control" placeholder="Search concepts..."
                                       @bind="searchQuery" @bind:event="oninput" />
                                @if (!string.IsNullOrWhiteSpace(searchQuery))
                                {
                                    <button class="btn btn-outline-secondary" @onclick="ClearSearch">
                                        <i class="bi bi-x"></i>
                                    </button>
                                }
                            </div>
                        }
                        <button class="btn btn-outline-secondary" @onclick="ShowSettingsDialog">
                            <i class="bi bi-gear"></i> Settings
                        </button>
                        <button class="btn btn-outline-success" @onclick="ShowImportDialog">
                            <i class="bi bi-upload"></i> Import TTL
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- View Mode Selector -->
        <div class="row mb-3">
            <div class="col-md-12">
                <div class="btn-group" role="group">
                    <button class="btn btn-outline-primary" @onclick="SwitchToGraphView"
                            disabled="@(viewMode == ViewMode.Graph)">
                        <i class="bi bi-diagram-3"></i> Graph
                    </button>
                    <button class="btn btn-outline-primary" @onclick="SwitchToListView"
                            disabled="@(viewMode == ViewMode.List)">
                        <i class="bi bi-list-ul"></i> List
                    </button>
                    <button class="btn btn-outline-primary" @onclick="SwitchToTtlView"
                            disabled="@(viewMode == ViewMode.Ttl)">
                        <i class="bi bi-file-code"></i> TTL
                    </button>
                    <button class="btn btn-outline-primary" @onclick="SwitchToNotesView"
                            disabled="@(viewMode == ViewMode.Notes)">
                        <i class="bi bi-journal-text"></i> Notes
                    </button>
                </div>
            </div>
        </div>

        <!-- TTL Import Dialog -->
        @if (showImportDialog)
        {
            <div class="row mb-3">
                <div class="col-md-12">
                    <div class="card border-success">
                        <div class="card-header bg-success text-white">
                            <h5 class="mb-0">Import Ontology from TTL File</h5>
                        </div>
                        <div class="card-body">
                            @if (importStep == ImportStep.Upload)
                            {
                                <div class="mb-3">
                                    <label class="form-label">Select TTL File</label>
                                    <InputFile OnChange="HandleFileSelected" accept=".ttl,.turtle,.rdf" class="form-control" />
                                    <small class="text-muted">Upload a Turtle (TTL) or RDF file containing ontology data</small>
                                </div>

                                @if (!string.IsNullOrEmpty(importError))
                                {
                                    <div class="alert alert-danger">
                                        <i class="bi bi-exclamation-triangle"></i> @importError
                                    </div>
                                }

                                @if (isProcessingFile)
                                {
                                    <div class="text-center py-3">
                                        <div class="spinner-border text-success" role="status">
                                            <span class="visually-hidden">Processing...</span>
                                        </div>
                                        <p class="mt-2">Parsing TTL file...</p>
                                    </div>
                                }

                                <div class="d-flex gap-2">
                                    <button class="btn btn-outline-secondary" @onclick="CancelImport">
                                        Cancel
                                    </button>
                                </div>
                            }
                            else if (importStep == ImportStep.Preview && importResult != null)
                            {
                                <div class="mb-3">
                                    <h6>File Summary</h6>
                                    <ul>
                                        <li><strong>Ontology:</strong> @importResult.OntologyName</li>
                                        @if (!string.IsNullOrEmpty(importResult.OntologyDescription))
                                        {
                                            <li><strong>Description:</strong> @importResult.OntologyDescription</li>
                                        }
                                        <li><strong>Concepts:</strong> @importResult.ConceptCount</li>
                                        <li><strong>Relationships:</strong> @importResult.RelationshipCount</li>
                                    </ul>
                                </div>

                                @if (mergePreview != null)
                                {
                                    <div class="alert alert-info">
                                        <h6>Merge Preview</h6>

                                        @if (mergePreview.NewConcepts.Any())
                                        {
                                            <div class="mb-2">
                                                <button class="btn btn-sm btn-outline-info px-2 py-1" @onclick="() => showNewConcepts = !showNewConcepts">
                                                    <i class="bi @(showNewConcepts ? "bi-chevron-down" : "bi-chevron-right") me-1"></i>
                                                    <strong>New concepts:</strong> @mergePreview.NewConcepts.Count
                                                </button>
                                                @if (showNewConcepts)
                                                {
                                                    <div class="ms-3 mt-1" style="max-height: 150px; overflow-y: auto;">
                                                        <ul class="small mb-0">
                                                            @foreach (var concept in mergePreview.NewConcepts.Take(50))
                                                            {
                                                                <li>@concept</li>
                                                            }
                                                            @if (mergePreview.NewConcepts.Count > 50)
                                                            {
                                                                <li class="text-muted">... and @(mergePreview.NewConcepts.Count - 50) more</li>
                                                            }
                                                        </ul>
                                                    </div>
                                                }
                                            </div>
                                        }

                                        @if (mergePreview.ExistingConcepts.Any())
                                        {
                                            <div class="mb-2">
                                                <button class="btn btn-sm btn-outline-secondary px-2 py-1" @onclick="() => showExistingConcepts = !showExistingConcepts">
                                                    <i class="bi @(showExistingConcepts ? "bi-chevron-down" : "bi-chevron-right") me-1"></i>
                                                    <strong>Existing concepts:</strong> @mergePreview.ExistingConcepts.Count (will reuse)
                                                </button>
                                                @if (showExistingConcepts)
                                                {
                                                    <div class="ms-3 mt-1" style="max-height: 150px; overflow-y: auto;">
                                                        <ul class="small mb-0">
                                                            @foreach (var concept in mergePreview.ExistingConcepts.Take(50))
                                                            {
                                                                <li>@concept</li>
                                                            }
                                                            @if (mergePreview.ExistingConcepts.Count > 50)
                                                            {
                                                                <li class="text-muted">... and @(mergePreview.ExistingConcepts.Count - 50) more</li>
                                                            }
                                                        </ul>
                                                    </div>
                                                }
                                            </div>
                                        }

                                        @if (mergePreview.ConflictingConcepts.Any())
                                        {
                                            <div class="mb-2">
                                                <button class="btn btn-sm btn-outline-warning px-2 py-1" @onclick="() => showConflictingConcepts = !showConflictingConcepts">
                                                    <i class="bi @(showConflictingConcepts ? "bi-chevron-down" : "bi-chevron-right") me-1"></i>
                                                    <strong>Conflicts:</strong> @mergePreview.ConflictingConcepts.Count (will skip)
                                                </button>
                                                @if (showConflictingConcepts)
                                                {
                                                    <div class="ms-3 mt-1" style="max-height: 150px; overflow-y: auto;">
                                                        <ul class="small mb-0 text-warning">
                                                            @foreach (var concept in mergePreview.ConflictingConcepts.Take(50))
                                                            {
                                                                <li>@concept</li>
                                                            }
                                                            @if (mergePreview.ConflictingConcepts.Count > 50)
                                                            {
                                                                <li class="text-muted">... and @(mergePreview.ConflictingConcepts.Count - 50) more</li>
                                                            }
                                                        </ul>
                                                    </div>
                                                }
                                            </div>
                                        }
                                    </div>
                                }

                                <div class="mb-3">
                                    <h6>Import Options</h6>
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" name="importOption" id="mergeOption"
                                               checked="@(importOption == ImportOption.Merge)"
                                               @onchange="() => importOption = ImportOption.Merge" />
                                        <label class="form-check-label" for="mergeOption">
                                            <strong>Merge into current ontology</strong>
                                            <br />
                                            <small class="text-muted">Add new concepts and relationships to "@ontology!.Name"</small>
                                        </label>
                                    </div>
                                    <div class="form-check mt-2">
                                        <input class="form-check-input" type="radio" name="importOption" id="newOption"
                                               checked="@(importOption == ImportOption.CreateNew)"
                                               @onchange="() => importOption = ImportOption.CreateNew" />
                                        <label class="form-check-label" for="newOption">
                                            <strong>Create as new ontology</strong>
                                            <br />
                                            <small class="text-muted">Import as a separate ontology that you can view independently</small>
                                        </label>
                                    </div>
                                </div>

                                <div class="d-flex gap-2">
                                    <button class="btn btn-success" @onclick="ExecuteImport" disabled="@isImporting">
                                        @if (isImporting)
                                        {
                                            <span class="spinner-border spinner-border-sm me-1"></span>
                                        }
                                        <i class="bi bi-check-circle"></i> Import
                                    </button>
                                    <button class="btn btn-outline-secondary" @onclick="CancelImport">
                                        Cancel
                                    </button>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }

        <!-- Ontology Settings Dialog -->
        @if (showSettingsDialog)
        {
            <div class="row mb-3">
                <div class="col-md-12">
                    <div class="card border-secondary">
                        <div class="card-header bg-secondary text-white d-flex justify-content-between align-items-center">
                            <h5 class="mb-0"><i class="bi bi-gear"></i> Ontology Settings</h5>
                            <button class="btn btn-sm btn-outline-light" @onclick="CancelSettings">
                                <i class="bi bi-x"></i>
                            </button>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label fw-bold">Name</label>
                                        <input type="text" class="form-control" @bind="editingOntologyName" />
                                    </div>

                                    <div class="mb-3">
                                        <label class="form-label fw-bold">Description</label>
                                        <textarea class="form-control" rows="3" @bind="editingOntologyDescription"></textarea>
                                        <small class="text-muted">A brief description of what this ontology represents</small>
                                    </div>

                                    <div class="mb-3">
                                        <label class="form-label fw-bold">Author</label>
                                        <input type="text" class="form-control" @bind="editingOntologyAuthor" placeholder="Your name or organization" />
                                    </div>

                                    <div class="mb-3">
                                        <label class="form-label fw-bold">Version</label>
                                        <input type="text" class="form-control" @bind="editingOntologyVersion" placeholder="e.g., 1.0.0" />
                                        <small class="text-muted">Semantic versioning recommended (e.g., 1.0.0)</small>
                                    </div>
                                </div>

                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label fw-bold">Namespace</label>
                                        <input type="text" class="form-control" @bind="editingOntologyNamespace" placeholder="http://example.org/ontology/" />
                                        <small class="text-muted">URI namespace for TTL export (e.g., http://example.org/my-ontology/)</small>
                                    </div>

                                    <div class="mb-3">
                                        <label class="form-label fw-bold">Tags</label>
                                        <input type="text" class="form-control" @bind="editingOntologyTags" placeholder="medical, research, biology" />
                                        <small class="text-muted">Comma-separated tags for categorization</small>
                                    </div>

                                    <div class="mb-3">
                                        <label class="form-label fw-bold">License</label>
                                        <input type="text" class="form-control" @bind="editingOntologyLicense" placeholder="e.g., CC-BY-4.0, MIT" />
                                        <small class="text-muted">License for this ontology (e.g., CC-BY-4.0, MIT, Apache-2.0)</small>
                                    </div>

                                    <div class="mb-3">
                                        <label class="form-label fw-bold">Ontology Frameworks</label>
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" id="usesBFO" @bind="editingOntologyUsesBFO" />
                                            <label class="form-check-label" for="usesBFO">
                                                Uses BFO (Basic Formal Ontology)
                                            </label>
                                        </div>
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" id="usesProvO" @bind="editingOntologyUsesProvO" />
                                            <label class="form-check-label" for="usesProvO">
                                                Uses PROV-O (Provenance Ontology)
                                            </label>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="d-flex gap-2 mt-3">
                                <button class="btn btn-primary" @onclick="SaveSettings">
                                    <i class="bi bi-check-circle"></i> Save Settings
                                </button>
                                <button class="btn btn-outline-secondary" @onclick="CancelSettings">
                                    Cancel
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }

        <div class="row" style="min-height: 100vh;">
            <!-- Main Content Area -->
            <div class="col-md-9">
                @if (viewMode == ViewMode.Ttl)
                {
                    <!-- TTL View -->
                    <div class="card">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <div>
                                <h5 class="mb-0"><i class="bi bi-file-code"></i> Turtle (TTL) Representation</h5>
                                <small class="text-muted">Read-only view of the ontology in TTL format</small>
                            </div>
                            <div class="d-flex gap-2 align-items-center">
                                <button class="btn btn-success btn-sm" @onclick="DownloadTtl">
                                    <i class="bi bi-download"></i> Download TTL
                                </button>
                                <div class="badge bg-warning text-dark">
                                    <i class="bi bi-exclamation-triangle"></i> Read-Only
                                </div>
                            </div>
                        </div>
                        <div class="card-body p-0">
                            @if (string.IsNullOrWhiteSpace(ttlContent))
                            {
                                <div class="text-center p-5">
                                    <div class="spinner-border text-primary" role="status">
                                        <span class="visually-hidden">Generating TTL...</span>
                                    </div>
                                    <p class="mt-2">Generating TTL representation...</p>
                                </div>
                            }
                            else
                            {
                                <div style="position: relative;">
                                    <pre style="margin: 0; padding: 1rem; background-color: #f8f9fa; max-height: 700px; overflow-y: auto;"><code>@ttlContent</code></pre>
                                    <button class="btn btn-sm btn-outline-secondary"
                                            style="position: absolute; top: 0.5rem; right: 0.5rem;"
                                            @onclick="CopyTtlToClipboard">
                                        <i class="bi bi-clipboard"></i> Copy
                                    </button>
                                </div>
                            }
                        </div>
                        <div class="card-footer bg-light">
                            <div class="alert alert-info mb-0 py-2">
                                <i class="bi bi-info-circle"></i>
                                <strong>Note:</strong> This is a read-only view. To edit the ontology structure, use the Graph or List view.
                                Manual TTL editing could break the ontology structure and is not recommended.
                            </div>
                        </div>
                    </div>
                }
                else if (viewMode == ViewMode.Notes)
                {
                    <!-- Notes View -->
                    <div class="card">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <div>
                                <h5 class="mb-0"><i class="bi bi-journal-text"></i> Ontology Notes</h5>
                                <small class="text-muted">Markdown-formatted documentation and notes</small>
                            </div>
                            <button class="btn btn-primary btn-sm" @onclick="SaveNotes">
                                <i class="bi bi-save"></i> Save Notes
                            </button>
                        </div>
                        <div class="card-body">
                            <textarea class="form-control" rows="20" @bind="editingNotes"
                                      placeholder="# Ontology Notes&#10;&#10;Add your notes here using Markdown format...&#10;&#10;## Example&#10;- Bullet point 1&#10;- Bullet point 2"
                                      style="font-family: monospace;"></textarea>
                        </div>
                        <div class="card-footer bg-light">
                            <div class="alert alert-info mb-0 py-2">
                                <i class="bi bi-info-circle"></i>
                                <strong>Tip:</strong> You can use Markdown formatting in your notes. This is a great place to document design decisions, requirements, or usage guidelines for your ontology.
                            </div>
                        </div>
                    </div>
                }
                else if (viewMode == ViewMode.List)
                {
                    <!-- List View -->
                    <div class="card mb-3">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <div>
                                <h5 class="mb-0">Concepts</h5>
                                @if (!string.IsNullOrWhiteSpace(searchQuery) && ontology.Concepts.Any())
                                {
                                    <small class="text-muted">Showing @FilteredConcepts.Count() of @ontology.Concepts.Count concepts</small>
                                }
                            </div>
                            <div class="d-flex gap-2 align-items-center">
                                <div class="input-group input-group-sm" style="width: 200px;">
                                    <span class="input-group-text"><i class="bi bi-sort-down"></i></span>
                                    <select class="form-select form-select-sm" @bind="sortOption">
                                        <option value="name">Sort by Name</option>
                                        <option value="category">Sort by Category</option>
                                        <option value="created">Sort by Created</option>
                                    </select>
                                </div>
                                <button class="btn btn-sm btn-primary" @onclick="ShowAddConceptDialog">
                                    <i class="bi bi-plus-circle"></i> Add Concept
                                </button>
                            </div>
                        </div>
                        <div class="card-body">
                            @if (!ontology.Concepts.Any())
                            {
                                <div class="alert alert-info">
                                    <i class="bi bi-lightbulb"></i> No concepts yet. Click "Add Concept" to start building your ontology!
                                </div>
                            }
                            else if (!FilteredConcepts.Any())
                            {
                                <div class="alert alert-warning">
                                    <i class="bi bi-search"></i> No concepts match your search query "@searchQuery"
                                </div>
                            }
                            else
                            {
                                <div class="list-group">
                                    @foreach (var concept in SortedConcepts)
                                    {
                                        <div class="list-group-item list-group-item-action"
                                             @onclick="() => SelectConcept(concept)"
                                             style="cursor: pointer; border-left: 4px solid @(concept.Color ?? "#6c757d")">
                                            <div class="d-flex justify-content-between align-items-start">
                                                <div class="flex-grow-1">
                                                    <div class="d-flex align-items-center gap-2">
                                                        <h6 class="mb-1">@concept.Name</h6>
                                                        @if (!string.IsNullOrWhiteSpace(concept.Category))
                                                        {
                                                            <span class="badge bg-secondary">@concept.Category</span>
                                                        }
                                                    </div>
                                                    @if (!string.IsNullOrWhiteSpace(concept.SimpleExplanation))
                                                    {
                                                        <p class="mb-1 text-muted small">@concept.SimpleExplanation</p>
                                                    }
                                                    @if (!string.IsNullOrWhiteSpace(concept.Examples))
                                                    {
                                                        <p class="mb-0 small">
                                                            <i class="bi bi-lightbulb text-warning"></i>
                                                            <em>Examples: @concept.Examples</em>
                                                        </p>
                                                    }
                                                    <!-- Show relationships -->
                                                    @{
                                                        var outgoing = ontology.Relationships.Where(r => r.SourceConceptId == concept.Id).ToList();
                                                        var incoming = ontology.Relationships.Where(r => r.TargetConceptId == concept.Id).ToList();
                                                    }
                                                    @if (outgoing.Any() || incoming.Any())
                                                    {
                                                        <div class="mt-2 small">
                                                            @foreach (var rel in outgoing)
                                                            {
                                                                <span class="badge bg-info me-1">
                                                                    @rel.RelationType → @rel.TargetConcept.Name
                                                                </span>
                                                            }
                                                            @foreach (var rel in incoming)
                                                            {
                                                                <span class="badge bg-success me-1">
                                                                    @rel.SourceConcept.Name → @rel.RelationType
                                                                </span>
                                                            }
                                                        </div>
                                                    }
                                                </div>
                                                <div class="btn-group">
                                                    <button class="btn btn-sm btn-outline-primary"
                                                            @onclick:stopPropagation="true"
                                                            @onclick="() => EditConcept(concept)"
                                                            title="Edit">
                                                        <i class="bi bi-pencil"></i>
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-secondary"
                                                            @onclick:stopPropagation="true"
                                                            @onclick="() => DuplicateConcept(concept)"
                                                            title="Create a copy of this concept">
                                                        <i class="bi bi-files"></i>
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-danger"
                                                            @onclick:stopPropagation="true"
                                                            @onclick="() => DeleteConcept(concept.Id)"
                                                            title="Delete">
                                                        <i class="bi bi-trash"></i>
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                    </div>

                    <!-- Relationships Card -->
                    <div class="card">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">Relationships</h5>
                            <button class="btn btn-sm btn-primary" @onclick="ShowAddRelationshipDialog"
                                    disabled="@(ontology.Concepts.Count < 2)">
                                <i class="bi bi-plus-circle"></i> Add Relationship
                            </button>
                        </div>
                        <div class="card-body">
                            @if (ontology.Concepts.Count < 2)
                            {
                                <div class="alert alert-warning">
                                    <i class="bi bi-info-circle"></i> You need at least 2 concepts before you can create relationships.
                                </div>
                            }
                            else if (!ontology.Relationships.Any())
                            {
                                <div class="alert alert-info">
                                    <i class="bi bi-lightbulb"></i> No relationships yet. Click "Add Relationship" to connect your concepts!
                                </div>
                            }
                            else
                            {
                                <div class="list-group">
                                    @foreach (var rel in ontology.Relationships.OrderBy(r => r.SourceConcept.Name))
                                    {
                                        <div class="list-group-item">
                                            <div class="d-flex justify-content-between align-items-center">
                                                <div>
                                                    <div class="d-flex align-items-center gap-2">
                                                        <span class="badge" style="background-color: @rel.SourceConcept.Color">
                                                            @rel.SourceConcept.Name
                                                        </span>
                                                        <span class="badge bg-dark">@rel.RelationType</span>
                                                        <i class="bi bi-arrow-right"></i>
                                                        <span class="badge" style="background-color: @rel.TargetConcept.Color">
                                                            @rel.TargetConcept.Name
                                                        </span>
                                                    </div>
                                                    @if (!string.IsNullOrWhiteSpace(rel.Description))
                                                    {
                                                        <p class="mb-0 mt-1 small text-muted">@rel.Description</p>
                                                    }
                                                </div>
                                                <div class="btn-group">
                                                    <button class="btn btn-sm btn-outline-primary"
                                                            @onclick="() => EditRelationship(rel)"
                                                            title="Edit">
                                                        <i class="bi bi-pencil"></i>
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-secondary"
                                                            @onclick="() => DuplicateRelationship(rel)"
                                                            title="Create a copy of this relationship">
                                                        <i class="bi bi-files"></i>
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-danger"
                                                            @onclick="() => DeleteRelationship(rel.Id)"
                                                            title="Delete">
                                                        <i class="bi bi-trash"></i>
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                    </div>
                }
                else
                {
                    <!-- Graph View -->
                    <div class="card">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <div>
                                <h5 class="mb-0"><i class="bi bi-diagram-3"></i> Interactive Graph</h5>
                                <small class="text-muted">
                                    Drag nodes to rearrange • Scroll to zoom • Click to select
                                    @if (!string.IsNullOrWhiteSpace(searchQuery) && ontology.Concepts.Any())
                                    {
                                        <span> • Showing @FilteredConcepts.Count() of @ontology.Concepts.Count concepts</span>
                                    }
                                </small>
                            </div>
                            <div class="d-flex gap-2">
                                <button class="btn btn-sm btn-primary" @onclick="ShowAddConceptDialog">
                                    <i class="bi bi-plus-circle"></i> Add Concept
                                </button>
                                @if (ontology.Concepts.Count >= 2)
                                {
                                    <button class="btn btn-sm btn-success" @onclick="ShowAddRelationshipDialog">
                                        <i class="bi bi-arrow-left-right"></i> Add Relationship
                                    </button>
                                }
                                @if (ontology.Concepts.Count > 0)
                                {
                                    <div class="btn-group">
                                        <button class="btn btn-sm btn-outline-secondary" @onclick='() => SetColorMode("concept")'
                                                disabled="@(graphColorMode == "concept")">
                                            <i class="bi bi-palette"></i> By Concept
                                        </button>
                                        <button class="btn btn-sm btn-outline-secondary" @onclick='() => SetColorMode("source")'
                                                disabled="@(graphColorMode == "source")">
                                            <i class="bi bi-folder"></i> By Source
                                        </button>
                                    </div>
                                }
                            </div>
                        </div>
                        <div class="card-body">
                            @if (ontology.Concepts.Count == 0)
                            {
                                <div class="text-center p-5">
                                    <i class="bi bi-diagram-3 display-1 text-muted"></i>
                                    <h4 class="mt-3">No concepts to visualize</h4>
                                    <p class="text-muted">Add concepts using the sidebar to see them in the graph!</p>
                                </div>
                            }
                            else if (!FilteredConcepts.Any())
                            {
                                <div class="text-center p-5">
                                    <i class="bi bi-search display-1 text-muted"></i>
                                    <h4 class="mt-3">No concepts match your search</h4>
                                    <p class="text-muted">No concepts match "@searchQuery"</p>
                                </div>
                            }
                            else
                            {
                                <div class="row">
                                    <div class="@(graphColorMode == "source" ? "col-md-10" : "col-md-12")">
                                        <GraphVisualization Ontology="@FilteredOntology" Height="700px" ColorMode="@graphColorMode"
                                                          OnNodeCtrlClicked="@HandleNodeCtrlClick" @ref="graphVisualization" />
                                    </div>
                                    @if (graphColorMode == "source")
                                    {
                                        var sourceOntologies = ontology.Concepts
                                            .Select(c => c.SourceOntology ?? "Original")
                                            .Distinct()
                                            .ToList();

                                        var predefinedColors = new[] { "#4A90E2", "#E94B3C", "#6BCF7F", "#F4A261", "#9B59B6", "#E67E22", "#1ABC9C", "#3498DB" };

                                        <div class="col-md-2">
                                            <div class="card h-100">
                                                <div class="card-body">
                                                    <h6 class="card-title small mb-3">Legend</h6>
                                                    <div class="d-flex flex-column gap-2">
                                                        @for (int i = 0; i < sourceOntologies.Count; i++)
                                                        {
                                                            var source = sourceOntologies[i];
                                                            var color = predefinedColors[i % predefinedColors.Length];

                                                            <div class="d-flex align-items-center gap-2">
                                                                <div style="width: 20px; height: 20px; background-color: @color; border-radius: 3px; flex-shrink: 0;"></div>
                                                                <small class="text-truncate" title="@source">@source</small>
                                                            </div>
                                                        }
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>

            <!-- Sidebar - Concept Details / Add Forms -->
            <div class="col-md-3">
                @if (showAddConcept || editingConcept != null)
                {
                    <div class="card border-primary @(shouldPulseSidebar ? "pulse-attention" : "")" style="position: sticky; top: 80px; max-height: calc(100vh - 100px); overflow-y: auto;">
                        <div class="card-header bg-primary text-white">
                            <h6 class="mb-0">@(editingConcept != null ? "Edit Concept" : "Add New Concept")</h6>
                        </div>
                        <div class="card-body">
                            @if (editingConcept == null)
                            {
                                <div class="mb-3">
                                    <label class="form-label small">Start from Template (optional)</label>
                                    <select class="form-select form-select-sm" @onchange="ApplyConceptTemplate">
                                        <option value="">-- Choose a template --</option>
                                        @foreach (var template in CommonConceptTemplates.Templates)
                                        {
                                            <option value="@template.Category">@template.Category (@template.Type)</option>
                                        }
                                    </select>
                                    <small class="text-muted">Quick-start with common concept types</small>
                                </div>
                            }
                            <div class="mb-2">
                                <label class="form-label small">Name <span class="text-danger">*</span></label>
                                <input type="text" class="form-control form-control-sm" @bind="newConcept.Name"
                                       placeholder="e.g., Mammal" />
                            </div>
                            <div class="mb-2">
                                <label class="form-label small">Category</label>
                                <input type="text" class="form-control form-control-sm" @bind="newConcept.Category"
                                       placeholder="e.g., Classification" />
                                <small class="text-muted">Helps organize concepts</small>
                            </div>
                            <div class="mb-2">
                                <label class="form-label small">Simple Explanation</label>
                                <textarea class="form-control form-control-sm" rows="2" @bind="newConcept.SimpleExplanation"
                                          placeholder="Explain this concept in simple terms"></textarea>
                            </div>
                            <div class="mb-2">
                                <label class="form-label small">Examples</label>
                                <input type="text" class="form-control form-control-sm" @bind="newConcept.Examples"
                                       placeholder="e.g., Dog, Cat, Whale" />
                            </div>
                            <div class="mb-2">
                                <label class="form-label small">Color</label>
                                <input type="color" class="form-control form-control-sm form-control-color"
                                       @bind="newConcept.Color" />
                            </div>
                            <div class="d-grid gap-2">
                                <button class="btn btn-sm btn-primary" @onclick="SaveConcept"
                                        disabled="@string.IsNullOrWhiteSpace(newConcept.Name)">
                                    <i class="bi bi-check-circle"></i> @(editingConcept != null ? "Save" : "Add")
                                </button>
                                <button class="btn btn-sm btn-outline-secondary" @onclick="CancelEditConcept">
                                    Cancel
                                </button>
                            </div>
                        </div>
                    </div>
                }
                else if (showAddRelationship)
                {
                    <div class="card border-primary @(shouldPulseSidebar ? "pulse-attention" : "")" style="position: sticky; top: 80px; max-height: calc(100vh - 100px); overflow-y: auto;">
                        <div class="card-header bg-primary text-white">
                            <h6 class="mb-0">@(editingRelationship != null ? "Edit Relationship" : "Add New Relationship")</h6>
                        </div>
                        <div class="card-body">
                            <div class="mb-2">
                                <label class="form-label small">From Concept <span class="text-danger">*</span></label>
                                <select class="form-select form-select-sm" @bind="newRelationship.SourceConceptId">
                                    <option value="0">-- Select --</option>
                                    @foreach (var concept in ontology.Concepts.OrderBy(c => c.Name))
                                    {
                                        <option value="@concept.Id">@concept.Name</option>
                                    }
                                </select>
                            </div>
                            <div class="mb-2">
                                <label class="form-label small">Relationship Type <span class="text-danger">*</span></label>
                                <select class="form-select form-select-sm" @bind="newRelationship.RelationType">
                                    <option value="">-- Select or type below --</option>
                                    @foreach (var template in CommonRelationshipTypes.Templates)
                                    {
                                        <option value="@template.Type">@template.Type (@template.Category)</option>
                                    }
                                </select>
                                <input type="text" class="form-control form-control-sm mt-1"
                                       @bind="customRelationType"
                                       placeholder="Or enter custom type" />
                            </div>
                            <div class="mb-2">
                                <label class="form-label small">To Concept <span class="text-danger">*</span></label>
                                <select class="form-select form-select-sm" @bind="newRelationship.TargetConceptId">
                                    <option value="0">-- Select --</option>
                                    @foreach (var concept in ontology.Concepts.OrderBy(c => c.Name))
                                    {
                                        <option value="@concept.Id">@concept.Name</option>
                                    }
                                </select>
                            </div>

                            <!-- Show helpful pattern -->
                            @if (!string.IsNullOrWhiteSpace(selectedRelationType))
                            {
                                var template = CommonRelationshipTypes.Templates.FirstOrDefault(t => t.Type == selectedRelationType);
                                if (template != null)
                                {
                                    <div class="alert alert-info py-2 small">
                                        <strong>Pattern:</strong> @template.Pattern<br/>
                                        <strong>Example:</strong> @template.Example
                                    </div>
                                }
                            }

                            <div class="mb-2">
                                <label class="form-label small">Description</label>
                                <textarea class="form-control form-control-sm" rows="2" @bind="newRelationship.Description"
                                          placeholder="Optional explanation"></textarea>
                            </div>
                            <div class="d-grid gap-2">
                                <button class="btn btn-sm btn-primary" @onclick="SaveRelationship"
                                        disabled="@(!CanAddRelationship())">
                                    <i class="bi bi-check-circle"></i> @(editingRelationship != null ? "Save" : "Add")
                                </button>
                                <button class="btn btn-sm btn-outline-secondary" @onclick="CancelEditRelationship">
                                    Cancel
                                </button>
                            </div>
                        </div>
                    </div>
                }
                else if (selectedConcept != null)
                {
                    <div class="card">
                        <div class="card-header">
                            <h6 class="mb-0">Concept Details</h6>
                        </div>
                        <div class="card-body">
                            <div class="d-flex align-items-center gap-2 mb-2">
                                <div style="width: 30px; height: 30px; background-color: @selectedConcept.Color; border-radius: 4px;"></div>
                                <h5 class="mb-0">@selectedConcept.Name</h5>
                            </div>
                            @if (!string.IsNullOrWhiteSpace(selectedConcept.Category))
                            {
                                <p class="mb-2"><strong>Category:</strong> @selectedConcept.Category</p>
                            }
                            @if (!string.IsNullOrWhiteSpace(selectedConcept.SimpleExplanation))
                            {
                                <p class="mb-2"><strong>Explanation:</strong> @selectedConcept.SimpleExplanation</p>
                            }
                            @if (!string.IsNullOrWhiteSpace(selectedConcept.Definition))
                            {
                                <p class="mb-2"><strong>Definition:</strong> @selectedConcept.Definition</p>
                            }
                            @if (!string.IsNullOrWhiteSpace(selectedConcept.Examples))
                            {
                                <p class="mb-2">
                                    <strong>Examples:</strong><br/>
                                    <em>@selectedConcept.Examples</em>
                                </p>
                            }
                            <button class="btn btn-sm btn-outline-secondary w-100" @onclick="() => selectedConcept = null">
                                Close
                            </button>
                        </div>
                    </div>
                }
                else
                {
                    @if (ontology.Concepts.Count == 0)
                    {
                        <!-- Show examples for new/empty ontologies -->
                        <div class="card border-info mb-3">
                            <div class="card-header bg-info text-white">
                                <h6 class="mb-0">📚 Example Concept</h6>
                            </div>
                            <div class="card-body small">
                                <div class="mb-2">
                                    <div class="d-flex align-items-center gap-2 mb-1">
                                        <div style="width: 20px; height: 20px; background-color: #4A90E2; border-radius: 3px;"></div>
                                        <strong>Animal</strong>
                                        <span class="badge bg-secondary">Root</span>
                                    </div>
                                    <p class="mb-1 text-muted">
                                        <strong>Explanation:</strong> Any living creature that needs to eat food to survive
                                    </p>
                                    <p class="mb-0">
                                        <i class="bi bi-lightbulb text-warning"></i>
                                        <em>Examples: Dogs, cats, birds, fish</em>
                                    </p>
                                </div>
                                <hr />
                                <p class="mb-0 text-muted"><strong>Try creating concepts like:</strong></p>
                                <ul class="mb-0">
                                    <li>Broad categories first (e.g., "Vehicle", "Food")</li>
                                    <li>Then more specific types (e.g., "Car", "Fruit")</li>
                                </ul>
                            </div>
                        </div>

                        <div class="card border-success">
                            <div class="card-header bg-success text-white">
                                <h6 class="mb-0">🔗 Example Relationship</h6>
                            </div>
                            <div class="card-body small">
                                <div class="mb-2">
                                    <div class="d-flex align-items-center gap-2 mb-2">
                                        <span class="badge bg-primary">Dog</span>
                                        <span class="badge bg-dark">is-a</span>
                                        <i class="bi bi-arrow-right"></i>
                                        <span class="badge bg-primary">Animal</span>
                                    </div>
                                    <p class="mb-0 text-muted">
                                        <strong>Meaning:</strong> Dogs are a type of animal
                                    </p>
                                </div>
                                <hr />
                                <p class="mb-0 text-muted"><strong>Common patterns:</strong></p>
                                <ul class="mb-0">
                                    <li><strong>is-a:</strong> Type/subtype (Car is-a Vehicle)</li>
                                    <li><strong>part-of:</strong> Components (Wheel part-of Car)</li>
                                    <li><strong>has-a:</strong> Attributes (Person has-a Name)</li>
                                </ul>
                            </div>
                        </div>
                    }
                    else
                    {
                        <!-- Tips for ontologies with content -->
                        <div class="card bg-light">
                            <div class="card-body">
                                <h6>💡 Tips</h6>
                                <ul class="small mb-0">
                                    <li>Start by adding <strong>concepts</strong> (the building blocks)</li>
                                    <li>Then connect them with <strong>relationships</strong></li>
                                    <li>Use colors to visually group related concepts</li>
                                    <li>Add examples to help others understand</li>
                                    <li>Click a concept to see its details</li>
                                </ul>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private Ontology? ontology;
    private ViewMode viewMode = ViewMode.List;
    private string graphColorMode = "concept"; // "concept" or "source"
    private bool showAddConcept = false;
    private bool showAddRelationship = false;
    private Concept? selectedConcept = null;
    private Concept? editingConcept = null;
    private Relationship? editingRelationship = null;

    private Concept newConcept = new();
    private Relationship newRelationship = new();
    private string customRelationType = string.Empty;
    private GraphVisualization? graphVisualization;

    private string ttlContent = string.Empty;
    private string editingNotes = string.Empty;
    private string searchQuery = string.Empty;
    private string sortOption = "category";
    private bool shouldPulseSidebar = false;
    private int? firstSelectedConceptId = null;

    // Settings dialog state
    private bool showSettingsDialog = false;
    private string editingOntologyName = string.Empty;
    private string? editingOntologyDescription;
    private string? editingOntologyAuthor;
    private string? editingOntologyVersion;
    private string? editingOntologyNamespace;
    private string? editingOntologyTags;
    private string? editingOntologyLicense;
    private bool editingOntologyUsesBFO;
    private bool editingOntologyUsesProvO;

    private string selectedRelationType =>
        !string.IsNullOrWhiteSpace(customRelationType) ? customRelationType : newRelationship.RelationType;

    private IEnumerable<Concept> FilteredConcepts
    {
        get
        {
            if (ontology == null || string.IsNullOrWhiteSpace(searchQuery))
                return ontology?.Concepts ?? Enumerable.Empty<Concept>();

            var query = searchQuery.ToLower();
            return ontology.Concepts.Where(c =>
                (c.Name?.ToLower().Contains(query) ?? false) ||
                (c.Definition?.ToLower().Contains(query) ?? false) ||
                (c.SimpleExplanation?.ToLower().Contains(query) ?? false) ||
                (c.Examples?.ToLower().Contains(query) ?? false) ||
                (c.Category?.ToLower().Contains(query) ?? false)
            );
        }
    }

    private Ontology FilteredOntology
    {
        get
        {
            if (ontology == null)
                return new Ontology();

            if (string.IsNullOrWhiteSpace(searchQuery))
                return ontology;

            // Create a filtered ontology with only matching concepts and their relationships
            var filtered = new Ontology
            {
                Id = ontology.Id,
                Name = ontology.Name,
                Description = ontology.Description,
                Author = ontology.Author,
                Version = ontology.Version,
                CreatedAt = ontology.CreatedAt,
                UpdatedAt = ontology.UpdatedAt,
                UsesBFO = ontology.UsesBFO,
                UsesProvO = ontology.UsesProvO
            };

            var filteredConceptIds = FilteredConcepts.Select(c => c.Id).ToHashSet();

            // Add filtered concepts
            foreach (var concept in FilteredConcepts)
            {
                filtered.Concepts.Add(concept);
            }

            // Add relationships where both source and target are in filtered concepts
            foreach (var rel in ontology.Relationships.Where(r =>
                filteredConceptIds.Contains(r.SourceConceptId) &&
                filteredConceptIds.Contains(r.TargetConceptId)))
            {
                filtered.Relationships.Add(rel);
            }

            return filtered;
        }
    }

    private IEnumerable<Concept> SortedConcepts
    {
        get
        {
            var concepts = FilteredConcepts;
            return sortOption switch
            {
                "name" => concepts.OrderBy(c => c.Name),
                "category" => concepts.OrderBy(c => c.Category).ThenBy(c => c.Name),
                "created" => concepts.OrderByDescending(c => c.Id),
                _ => concepts.OrderBy(c => c.Category).ThenBy(c => c.Name)
            };
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadOntology();
    }

    private async Task LoadOntology()
    {
        ontology = await OntologyService.GetOntologyAsync(Id);

        // Refresh graph if it exists and we're in graph mode
        if (graphVisualization != null && viewMode == ViewMode.Graph)
        {
            await Task.Delay(100); // Small delay to ensure DOM is updated
            await graphVisualization.RefreshGraph();
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/");
    }

    private void ClearSearch()
    {
        searchQuery = string.Empty;
    }

    private async Task SetColorMode(string mode)
    {
        graphColorMode = mode;
        if (graphVisualization != null)
        {
            await Task.Delay(100); // Small delay to ensure parameter is updated
            await graphVisualization.RefreshGraph();
        }
    }

    private void ShowAddConceptDialog()
    {
        newConcept = new Concept
        {
            OntologyId = Id,
            Color = "#" + Random.Shared.Next(0x1000000).ToString("X6") // Random color
        };
        showAddConcept = true;
        showAddRelationship = false;
        selectedConcept = null;
    }

    private void ShowAddRelationshipDialog()
    {
        newRelationship = new Relationship
        {
            OntologyId = Id
        };
        customRelationType = string.Empty;
        showAddRelationship = true;
        showAddConcept = false;
        selectedConcept = null;
    }

    private async Task SaveConcept()
    {
        if (string.IsNullOrWhiteSpace(newConcept.Name))
            return;

        try
        {
            if (editingConcept != null)
            {
                // Update existing concept
                await OntologyService.UpdateConceptAsync(newConcept);
                ToastService.ShowSuccess($"Updated concept \"{newConcept.Name}\"");
                editingConcept = null;
            }
            else
            {
                // Create new concept
                await OntologyService.CreateConceptAsync(newConcept);
                ToastService.ShowSuccess($"Created concept \"{newConcept.Name}\"");
            }

            showAddConcept = false;
            await LoadOntology();
        }
        catch (Exception ex)
        {
            var errorMessage = ex.InnerException != null
                ? $"{ex.Message} - {ex.InnerException.Message}"
                : ex.Message;
            ToastService.ShowError($"Failed to save concept: {errorMessage}", 8000);
        }
    }

    private void EditConcept(Concept concept)
    {
        editingConcept = concept;
        newConcept = new Concept
        {
            Id = concept.Id,
            OntologyId = concept.OntologyId,
            Name = concept.Name,
            Category = concept.Category,
            SimpleExplanation = concept.SimpleExplanation,
            Definition = concept.Definition,
            Examples = concept.Examples,
            Color = concept.Color,
            SourceOntology = concept.SourceOntology
        };
        showAddConcept = true;
        showAddRelationship = false;
        selectedConcept = null;
    }

    private async Task DuplicateConcept(Concept concept)
    {
        newConcept = new Concept
        {
            OntologyId = Id,
            Name = $"{concept.Name} (Copy)",
            Category = concept.Category,
            SimpleExplanation = concept.SimpleExplanation,
            Definition = concept.Definition,
            Examples = concept.Examples,
            Color = concept.Color,
            SourceOntology = concept.SourceOntology
        };
        editingConcept = null;
        showAddConcept = true;
        showAddRelationship = false;
        selectedConcept = null;

        // Trigger pulse animation
        shouldPulseSidebar = true;
        StateHasChanged();
        await Task.Delay(3600); // Duration of 3 pulses at 1.2s each
        shouldPulseSidebar = false;

        ToastService.ShowInfo($"Ready to create copy of \"{concept.Name}\". Click 'Add' to save or 'Cancel' to discard.", 5000);
    }

    private void ApplyConceptTemplate(ChangeEventArgs e)
    {
        var templateCategory = e.Value?.ToString();
        if (string.IsNullOrWhiteSpace(templateCategory))
            return;

        var template = CommonConceptTemplates.Templates.FirstOrDefault(t => t.Category == templateCategory);
        if (template != null)
        {
            newConcept.Category = template.Category;
            newConcept.SimpleExplanation = template.Description;
            newConcept.Examples = template.Examples;
            newConcept.Color = template.Color;
            ToastService.ShowInfo($"Applied {template.Category} template - customize as needed");
        }
    }

    private void CancelEditConcept()
    {
        showAddConcept = false;
        editingConcept = null;
        newConcept = new Concept();
    }

    private void HandleNodeCtrlClick(int conceptId)
    {
        if (firstSelectedConceptId == null)
        {
            // First node selected
            firstSelectedConceptId = conceptId;
            var concept = ontology?.Concepts.FirstOrDefault(c => c.Id == conceptId);
            if (concept != null)
            {
                ToastService.ShowInfo($"First node selected: \"{concept.Name}\". Cmd/Ctrl+click another node to create relationship.", 5000);
            }
        }
        else if (firstSelectedConceptId == conceptId)
        {
            // Same node clicked again - cancel selection
            firstSelectedConceptId = null;
            ToastService.ShowInfo("Selection cancelled");
        }
        else
        {
            // Second node selected - create relationship
            var sourceConcept = ontology?.Concepts.FirstOrDefault(c => c.Id == firstSelectedConceptId.Value);
            var targetConcept = ontology?.Concepts.FirstOrDefault(c => c.Id == conceptId);

            if (sourceConcept != null && targetConcept != null)
            {
                // Initialize new relationship with selected nodes
                newRelationship = new Relationship
                {
                    OntologyId = Id,
                    SourceConceptId = firstSelectedConceptId.Value,
                    TargetConceptId = conceptId
                };
                customRelationType = string.Empty;
                showAddRelationship = true;
                showAddConcept = false;
                selectedConcept = null;
                editingRelationship = null;

                ToastService.ShowInfo($"Creating relationship: \"{sourceConcept.Name}\" → \"{targetConcept.Name}\"", 3000);
            }

            // Reset selection
            firstSelectedConceptId = null;
        }
    }

    private void EditRelationship(Relationship relationship)
    {
        editingRelationship = relationship;
        newRelationship = new Relationship
        {
            Id = relationship.Id,
            OntologyId = relationship.OntologyId,
            SourceConceptId = relationship.SourceConceptId,
            TargetConceptId = relationship.TargetConceptId,
            RelationType = relationship.RelationType,
            Description = relationship.Description
        };
        customRelationType = string.Empty;
        showAddRelationship = true;
        showAddConcept = false;
        selectedConcept = null;
    }

    private async Task DuplicateRelationship(Relationship relationship)
    {
        newRelationship = new Relationship
        {
            OntologyId = Id,
            SourceConceptId = relationship.SourceConceptId,
            TargetConceptId = relationship.TargetConceptId,
            RelationType = relationship.RelationType,
            Description = relationship.Description
        };
        customRelationType = string.Empty;
        editingRelationship = null;
        showAddRelationship = true;
        showAddConcept = false;
        selectedConcept = null;

        // Trigger pulse animation
        shouldPulseSidebar = true;
        StateHasChanged();
        await Task.Delay(3600); // Duration of 3 pulses at 1.2s each
        shouldPulseSidebar = false;

        ToastService.ShowInfo($"Ready to create copy of relationship. Click 'Add' to save or 'Cancel' to discard.", 5000);
    }

    private void CancelEditRelationship()
    {
        showAddRelationship = false;
        editingRelationship = null;
        newRelationship = new Relationship();
        customRelationType = string.Empty;
    }

    private async Task SaveRelationship()
    {
        if (!CanAddRelationship())
            return;

        // Validate that both concepts exist in the current ontology
        var sourceConcept = ontology?.Concepts.FirstOrDefault(c => c.Id == newRelationship.SourceConceptId);
        var targetConcept = ontology?.Concepts.FirstOrDefault(c => c.Id == newRelationship.TargetConceptId);

        if (sourceConcept == null)
        {
            ToastService.ShowError($"Source concept (ID: {newRelationship.SourceConceptId}) not found in this ontology");
            return;
        }

        if (targetConcept == null)
        {
            ToastService.ShowError($"Target concept (ID: {newRelationship.TargetConceptId}) not found in this ontology");
            return;
        }

        // Use custom type if provided, otherwise use selected
        if (!string.IsNullOrWhiteSpace(customRelationType))
        {
            newRelationship.RelationType = customRelationType;
        }

        try
        {
            if (editingRelationship != null)
            {
                // Update existing relationship
                await OntologyService.UpdateRelationshipAsync(newRelationship);
                ToastService.ShowSuccess("Updated relationship");
                editingRelationship = null;
            }
            else
            {
                // Create new relationship
                await OntologyService.CreateRelationshipAsync(newRelationship);
                ToastService.ShowSuccess($"Created relationship: {sourceConcept.Name} → {targetConcept.Name}");
            }

            showAddRelationship = false;
            customRelationType = string.Empty;
            await LoadOntology();
        }
        catch (Exception ex)
        {
            var errorMessage = ex.InnerException != null
                ? $"{ex.Message} - {ex.InnerException.Message}"
                : ex.Message;
            var debugInfo = $"Debug: OntologyId={newRelationship.OntologyId}, SourceId={newRelationship.SourceConceptId}, TargetId={newRelationship.TargetConceptId}, Type={newRelationship.RelationType}";
            ToastService.ShowError($"Failed to save relationship: {errorMessage}. {debugInfo}");

            // Log to console for debugging
            Console.WriteLine($"Relationship save failed:");
            Console.WriteLine($"  OntologyId: {newRelationship.OntologyId}");
            Console.WriteLine($"  SourceConceptId: {newRelationship.SourceConceptId}");
            Console.WriteLine($"  TargetConceptId: {newRelationship.TargetConceptId}");
            Console.WriteLine($"  RelationType: {newRelationship.RelationType}");
            Console.WriteLine($"  Error: {errorMessage}");
        }
    }

    private bool CanAddRelationship()
    {
        return newRelationship.SourceConceptId > 0
            && newRelationship.TargetConceptId > 0
            && (newRelationship.SourceConceptId != newRelationship.TargetConceptId)
            && (!string.IsNullOrWhiteSpace(newRelationship.RelationType) || !string.IsNullOrWhiteSpace(customRelationType));
    }

    private async Task DeleteConcept(int conceptId)
    {
        var concept = ontology?.Concepts.FirstOrDefault(c => c.Id == conceptId);
        if (concept == null) return;

        var confirmed = await ConfirmService.ShowAsync(
            "Delete Concept",
            $"Are you sure you want to delete \"{concept.Name}\"? This will also delete all related relationships.",
            "Delete",
            ConfirmType.Danger
        );

        if (confirmed)
        {
            try
            {
                await OntologyService.DeleteConceptAsync(conceptId);
                selectedConcept = null;
                await LoadOntology();
                ToastService.ShowSuccess($"Deleted concept \"{concept.Name}\"");
            }
            catch (Exception ex)
            {
                ToastService.ShowError($"Failed to delete concept: {ex.Message}");
            }
        }
    }

    private async Task DeleteRelationship(int relationshipId)
    {
        var relationship = ontology?.Relationships.FirstOrDefault(r => r.Id == relationshipId);
        if (relationship == null) return;

        var confirmed = await ConfirmService.ShowAsync(
            "Delete Relationship",
            $"Are you sure you want to delete the relationship from \"{relationship.SourceConcept.Name}\" to \"{relationship.TargetConcept.Name}\"?",
            "Delete",
            ConfirmType.Danger
        );

        if (confirmed)
        {
            try
            {
                await OntologyService.DeleteRelationshipAsync(relationshipId);
                await LoadOntology();
                ToastService.ShowSuccess("Deleted relationship");
            }
            catch (Exception ex)
            {
                ToastService.ShowError($"Failed to delete relationship: {ex.Message}");
            }
        }
    }

    private void SelectConcept(Concept concept)
    {
        selectedConcept = concept;
        showAddConcept = false;
        showAddRelationship = false;
    }

    // TTL Import functionality
    private bool showImportDialog = false;
    private ImportStep importStep = ImportStep.Upload;
    private bool isProcessingFile = false;
    private bool isImporting = false;
    private string? importError = null;
    private TtlImportResult? importResult = null;
    private MergePreview? mergePreview = null;
    private ImportOption importOption = ImportOption.Merge;
    private bool showNewConcepts = false;
    private bool showExistingConcepts = false;
    private bool showConflictingConcepts = false;

    private void ShowImportDialog()
    {
        showImportDialog = true;
        importStep = ImportStep.Upload;
        importError = null;
        importResult = null;
        mergePreview = null;
        importOption = ImportOption.Merge;
    }

    private void CancelImport()
    {
        showImportDialog = false;
        importStep = ImportStep.Upload;
        importError = null;
        importResult = null;
        mergePreview = null;
    }

    // Settings dialog methods
    private void ShowSettingsDialog()
    {
        if (ontology == null) return;

        // Load current values into editing variables
        editingOntologyName = ontology.Name;
        editingOntologyDescription = ontology.Description;
        editingOntologyAuthor = ontology.Author;
        editingOntologyVersion = ontology.Version;
        editingOntologyNamespace = ontology.Namespace;
        editingOntologyTags = ontology.Tags;
        editingOntologyLicense = ontology.License;
        editingOntologyUsesBFO = ontology.UsesBFO;
        editingOntologyUsesProvO = ontology.UsesProvO;

        showSettingsDialog = true;
    }

    private async Task SaveSettings()
    {
        if (ontology == null) return;

        try
        {
            // Update ontology with edited values
            ontology.Name = editingOntologyName;
            ontology.Description = editingOntologyDescription;
            ontology.Author = editingOntologyAuthor;
            ontology.Version = editingOntologyVersion;
            ontology.Namespace = editingOntologyNamespace;
            ontology.Tags = editingOntologyTags;
            ontology.License = editingOntologyLicense;
            ontology.UsesBFO = editingOntologyUsesBFO;
            ontology.UsesProvO = editingOntologyUsesProvO;
            ontology.UpdatedAt = DateTime.UtcNow;

            await OntologyService.UpdateOntologyAsync(ontology);
            showSettingsDialog = false;

            ToastService.ShowSuccess("Ontology settings updated successfully");
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Failed to save settings: {ex.Message}");
        }
    }

    private void CancelSettings()
    {
        showSettingsDialog = false;
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        importError = null;
        isProcessingFile = true;

        try
        {
            var file = e.File;

            // Limit file size to 10MB
            if (file.Size > 10 * 1024 * 1024)
            {
                importError = "File size exceeds 10MB limit";
                isProcessingFile = false;
                return;
            }

            using var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024);
            using var memoryStream = new MemoryStream();
            await stream.CopyToAsync(memoryStream);
            memoryStream.Position = 0;

            // Parse the TTL file
            importResult = await TtlImportService.ParseTtlFileAsync(memoryStream);

            if (!importResult.Success)
            {
                importError = importResult.ErrorMessage;
                isProcessingFile = false;
                return;
            }

            // Generate merge preview
            if (importResult.ParsedGraph != null)
            {
                mergePreview = await TtlImportService.PreviewMergeAsync(Id, importResult.ParsedGraph);
            }

            // Move to preview step
            importStep = ImportStep.Preview;
        }
        catch (Exception ex)
        {
            importError = $"Error processing file: {ex.Message}";
        }
        finally
        {
            isProcessingFile = false;
        }
    }

    private async Task ExecuteImport()
    {
        if (importResult?.ParsedGraph == null)
            return;

        isImporting = true;
        importError = null;

        try
        {
            if (importOption == ImportOption.Merge)
            {
                // Merge into current ontology
                await TtlImportService.MergeIntoExistingAsync(Id, importResult.ParsedGraph);
                await LoadOntology();
                showImportDialog = false;
                ToastService.ShowSuccess($"Imported {importResult.ConceptCount} concepts successfully");
            }
            else
            {
                // Create as new ontology
                var newOntology = await TtlImportService.ImportAsNewOntologyAsync(importResult.ParsedGraph);
                ToastService.ShowSuccess($"Created new ontology \"{newOntology.Name}\"");
                // Navigate to the new ontology
                Navigation.NavigateTo($"/ontology/{newOntology.Id}");
            }
        }
        catch (Exception ex)
        {
            importError = $"Import failed: {ex.Message}";
            ToastService.ShowError($"Import failed: {ex.Message}");
        }
        finally
        {
            isImporting = false;
        }
    }

    private void SwitchToGraphView()
    {
        viewMode = ViewMode.Graph;

        // Hide sidebar panels when switching views
        showAddConcept = false;
        showAddRelationship = false;
        editingConcept = null;
        editingRelationship = null;
        selectedConcept = null;
    }

    private void SwitchToListView()
    {
        viewMode = ViewMode.List;

        // Hide sidebar panels when switching views
        showAddConcept = false;
        showAddRelationship = false;
        editingConcept = null;
        editingRelationship = null;
        selectedConcept = null;
    }

    private async Task SwitchToTtlView()
    {
        viewMode = ViewMode.Ttl;
        ttlContent = string.Empty; // Clear to show loading

        // Hide sidebar panels when switching to TTL view
        showAddConcept = false;
        showAddRelationship = false;
        editingConcept = null;
        editingRelationship = null;
        selectedConcept = null;

        StateHasChanged();

        // Generate TTL in background
        await Task.Run(() =>
        {
            if (ontology != null)
            {
                ttlContent = TtlExportService.ExportToTtl(ontology);
            }
        });

        StateHasChanged();
    }

    private void SwitchToNotesView()
    {
        viewMode = ViewMode.Notes;
        editingNotes = ontology?.Notes ?? string.Empty;

        // Hide sidebar panels when switching to Notes view
        showAddConcept = false;
        showAddRelationship = false;
        editingConcept = null;
        editingRelationship = null;
        selectedConcept = null;
    }

    private async Task SaveNotes()
    {
        if (ontology == null) return;

        try
        {
            ontology.Notes = editingNotes;
            ontology.UpdatedAt = DateTime.UtcNow;
            await OntologyService.UpdateOntologyAsync(ontology);
            ToastService.ShowSuccess("Notes saved successfully");
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Failed to save notes: {ex.Message}");
        }
    }

    private async Task CopyTtlToClipboard()
    {
        if (string.IsNullOrWhiteSpace(ttlContent))
            return;

        try
        {
            var success = await JS.InvokeAsync<bool>("copyToClipboard", ttlContent);
            if (success)
            {
                ToastService.ShowSuccess("Copied TTL to clipboard");
            }
            else
            {
                ToastService.ShowError("Failed to copy to clipboard");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Failed to copy to clipboard: {ex.Message}");
        }
    }

    private async Task DownloadTtl()
    {
        if (ontology == null || string.IsNullOrWhiteSpace(ttlContent))
            return;

        try
        {
            var fileName = $"{ontology.Name.Replace(" ", "_").ToLower()}.ttl";
            await JS.InvokeVoidAsync("downloadTextFile", fileName, ttlContent);
            ToastService.ShowSuccess($"Downloaded {fileName}");
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Failed to download TTL: {ex.Message}");
        }
    }

    // Keyboard shortcuts temporarily disabled due to pre-rendering issues
    // The help dialog (press ?) still works via the JavaScript file

    private enum ViewMode
    {
        Graph,
        List,
        Ttl,
        Notes
    }

    private enum ImportStep
    {
        Upload,
        Preview
    }

    private enum ImportOption
    {
        Merge,
        CreateNew
    }
}
