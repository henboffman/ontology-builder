@using Eidos.Services.Interfaces
@inject IOntologyService OntologyService

<div class="folder-sidebar">
    <div class="folder-header">
        <h6 class="mb-0">
            <i class="bi bi-folder me-2"></i>Folders
        </h6>
        <button class="btn btn-sm btn-outline-primary" @onclick="OnAddFolderClick" title="New Folder">
            <i class="bi bi-plus"></i>
        </button>
    </div>

    <div class="folder-list">
        <!-- All Ontologies (no filter) -->
        <div class="folder-item @(SelectedTag == null ? "active" : "")"
             @onclick="() => OnFolderSelect(null)">
            <i class="bi bi-grid-3x3-gap me-2"></i>
            <span>All Ontologies</span>
            @if (TotalCount > 0)
            {
                <span class="badge bg-secondary ms-auto">@TotalCount</span>
            }
        </div>

        <!-- Special Folders -->
        @if (SharedWithMeCount > 0)
        {
            <div class="folder-item @(SelectedTag == "$$SHARED_WITH_ME$$" ? "active" : "")"
                 @onclick="@(() => OnFolderSelect("$$SHARED_WITH_ME$$"))">
                <i class="bi bi-share me-2"></i>
                <span>Shared with Me</span>
                <span class="badge bg-secondary ms-auto">@SharedWithMeCount</span>
            </div>
        }

        @if (PublicOntologiesCount > 0)
        {
            <div class="folder-item @(SelectedTag == "$$PUBLIC$$" ? "active" : "")"
                 @onclick="@(() => OnFolderSelect("$$PUBLIC$$"))">
                <i class="bi bi-globe me-2"></i>
                <span>Public Ontologies</span>
                <span class="badge bg-secondary ms-auto">@PublicOntologiesCount</span>
            </div>
        }

        <!-- Divider if there are special folders and user folders -->
        @if ((SharedWithMeCount > 0 || PublicOntologiesCount > 0) && Folders.Any())
        {
            <hr class="my-2" style="border-color: var(--bs-border-color);" />
        }

        <!-- Dynamic folders from tags -->
        @foreach (var folder in Folders)
        {
            <div class="folder-item @(SelectedTag == folder.Tag ? "active" : "")"
                 @onclick="() => OnFolderSelect(folder.Tag)"
                 data-tag="@folder.Tag">
                <i class="bi bi-folder-fill me-2" style="@(folder.Color != null ? $"color: {folder.Color}" : "")"></i>
                <span>@folder.Tag</span>
                @if (folder.Count > 0)
                {
                    <span class="badge bg-secondary ms-auto">@folder.Count</span>
                }
            </div>
        }

        @if (!Folders.Any() && SharedWithMeCount == 0 && PublicOntologiesCount == 0)
        {
            <div class="text-muted small text-center py-3">
                <i class="bi bi-folder-plus d-block mb-2" style="font-size: 2rem; opacity: 0.3;"></i>
                No folders yet.<br/>
                Click <i class="bi bi-plus"></i> to create one
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public List<FolderInfo> Folders { get; set; } = new();

    [Parameter]
    public int TotalCount { get; set; }

    [Parameter]
    public int SharedWithMeCount { get; set; }

    [Parameter]
    public int PublicOntologiesCount { get; set; }

    [Parameter]
    public string? SelectedTag { get; set; }

    [Parameter]
    public EventCallback<string?> OnFolderSelected { get; set; }

    [Parameter]
    public EventCallback OnAddFolderClick { get; set; }

    private void OnFolderSelect(string? tag)
    {
        OnFolderSelected.InvokeAsync(tag);
    }

    public class FolderInfo
    {
        public string Tag { get; set; } = string.Empty;
        public string? Color { get; set; }
        public int Count { get; set; }
    }
}

<style>
    .folder-sidebar {
        background: var(--bs-body-bg);
        border-right: 1px solid var(--bs-border-color);
        height: 100%;
        display: flex;
        flex-direction: column;
    }

    .folder-header {
        padding: 1rem;
        border-bottom: 1px solid var(--bs-border-color);
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .folder-list {
        flex: 1;
        overflow-y: auto;
        padding: 0.5rem;
    }

    .folder-item {
        padding: 0.75rem 1rem;
        margin-bottom: 0.25rem;
        border-radius: 0.375rem;
        cursor: pointer;
        display: flex;
        align-items: center;
        transition: background-color 0.15s ease-in-out;
        user-select: none;
    }

    .folder-item:hover {
        background-color: var(--bs-secondary-bg);
    }

    .folder-item.active {
        background-color: var(--bs-primary);
        color: white;
    }

    .folder-item.active .badge {
        background-color: rgba(255, 255, 255, 0.2) !important;
        color: white;
    }

    .folder-item i {
        font-size: 1.1rem;
    }

    .folder-item .badge {
        margin-left: auto;
        font-size: 0.75rem;
    }

    /* Drag and drop visual feedback */
    .folder-item.drag-over {
        background-color: var(--bs-primary-bg-subtle);
        border: 2px dashed var(--bs-primary);
    }
</style>
