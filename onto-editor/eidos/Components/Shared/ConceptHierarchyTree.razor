@using Eidos.Models
@using Eidos.Services.Interfaces
@inject IConceptService ConceptService

<div class="concept-hierarchy-tree">
    @if (HierarchyNodes == null)
    {
        <div class="text-center py-4">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading hierarchy...</span>
            </div>
            <p class="text-muted mt-2">Loading hierarchy...</p>
        </div>
    }
    else if (!HierarchyNodes.Any())
    {
        <div class="empty-state text-center py-5">
            <i class="bi bi-diagram-3 fs-1 text-muted"></i>
            <p class="text-muted mt-3">No hierarchical relationships found.</p>
            <small class="text-muted">
                Create relationships with type "subclass-of" or "is-a" to build the hierarchy.
            </small>
        </div>
    }
    else
    {
        <div class="hierarchy-tree-content">
            @foreach (var node in HierarchyNodes)
            {
                <HierarchyNodeView Node="@node"
                                  SelectedConceptId="@SelectedConceptId"
                                  OnConceptSelected="@OnConceptSelected"
                                  OnToggleExpand="@HandleToggleExpand" />
            }
        </div>
    }
</div>

@code {
    [Parameter]
    public IEnumerable<ConceptHierarchyNode>? HierarchyNodes { get; set; }

    [Parameter]
    public int? SelectedConceptId { get; set; }

    [Parameter]
    public EventCallback<Concept> OnConceptSelected { get; set; }

    private void HandleToggleExpand(ConceptHierarchyNode node)
    {
        node.IsExpanded = !node.IsExpanded;
        StateHasChanged();
    }
}
