@using Eidos.Models
@using Eidos.Models.Enums
@using Eidos.Services
@inject OntologyPermissionService PermissionService
@inject ToastService ToastService
@inject ILogger<PermissionsSettingsTab> Logger

<div class="settings-section">
    <div class="settings-section-header">
        <h4>Access & Permissions</h4>
        <p class="text-muted">Control who can view and edit this ontology.</p>
    </div>

    <div class="settings-group">
        <!-- Visibility Settings -->
        <div class="settings-item">
            <label class="form-label fw-bold">Visibility</label>
            <p class="text-muted small mb-3">Who can see this ontology?</p>

            <div class="form-check mb-2">
                <input class="form-check-input" type="radio" name="visibility" id="visibilityPrivate"
                       checked="@(visibility == OntologyVisibility.Private)"
                       @onchange="@(() => visibility = OntologyVisibility.Private)" />
                <label class="form-check-label" for="visibilityPrivate">
                    <strong><i class="bi bi-lock me-2"></i>Private</strong>
                    <p class="text-muted small mb-0">Only you and people you explicitly grant access to can view this ontology.</p>
                </label>
            </div>

            <div class="form-check mb-2">
                <input class="form-check-input" type="radio" name="visibility" id="visibilityGroup"
                       checked="@(visibility == OntologyVisibility.Group)"
                       @onchange="@(() => visibility = OntologyVisibility.Group)" />
                <label class="form-check-label" for="visibilityGroup">
                    <strong><i class="bi bi-people me-2"></i>Group</strong>
                    <p class="text-muted small mb-0">Visible to specific groups you manage below.</p>
                </label>
            </div>

            <div class="form-check">
                <input class="form-check-input" type="radio" name="visibility" id="visibilityPublic"
                       checked="@(visibility == OntologyVisibility.Public)"
                       @onchange="@(() => visibility = OntologyVisibility.Public)" />
                <label class="form-check-label" for="visibilityPublic">
                    <strong><i class="bi bi-globe me-2"></i>Public</strong>
                    <p class="text-muted small mb-0">Anyone can view this ontology.</p>
                </label>
            </div>
        </div>

        <!-- Public Edit Settings (only show if Public) -->
        @if (visibility == OntologyVisibility.Public)
        {
            <div class="settings-item">
                <label class="form-label fw-bold">Public Editing</label>
                <div class="form-check form-switch">
                    <input class="form-check-input" type="checkbox" id="allowPublicEdit" @bind="allowPublicEdit" />
                    <label class="form-check-label" for="allowPublicEdit">
                        Allow anyone to edit this ontology
                    </label>
                </div>
                <p class="text-muted small mt-2">
                    <i class="bi bi-exclamation-triangle text-warning me-1"></i>
                    Warning: Enabling this allows anonymous users to modify your ontology. Use with caution.
                </p>
            </div>
        }

        <!-- Group Access Management -->
        @if (visibility == OntologyVisibility.Group)
        {
            <div class="settings-item">
                <label class="form-label fw-bold">Group Access</label>
                <p class="text-muted small mb-3">Manage which groups can access this ontology.</p>

                @if (groupAccess == null)
                {
                    <div class="d-flex justify-content-center p-4">
                        <div class="spinner-border spinner-border-sm" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                }
                else if (!groupAccess.Any())
                {
                    <div class="alert alert-info">
                        <i class="bi bi-info-circle me-2"></i>
                        No groups have been granted access yet. Add groups below.
                    </div>
                }
                else
                {
                    <div class="list-group mb-3">
                        @foreach (var access in groupAccess)
                        {
                            <div class="list-group-item d-flex justify-content-between align-items-center">
                                <div>
                                    <strong>@access.GroupName</strong>
                                    <p class="text-muted small mb-0">@access.MemberCount members</p>
                                </div>
                                <div class="d-flex align-items-center gap-2">
                                    <select class="form-select form-select-sm" style="width: auto;"
                                            @bind="access.PermissionLevel">
                                        <option value="@PermissionLevel.View">View Only</option>
                                        <option value="@PermissionLevel.ViewAndAdd">View & Add</option>
                                        <option value="@PermissionLevel.ViewAddEdit">View, Add & Edit</option>
                                        <option value="@PermissionLevel.FullAccess">Full Access</option>
                                    </select>
                                    <button class="btn btn-sm btn-outline-danger"
                                            @onclick="@(() => RemoveGroupAccess(access.GroupId))">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </div>
                            </div>
                        }
                    </div>
                }

                <button class="btn btn-sm btn-outline-primary" @onclick="ShowAddGroupDialog">
                    <i class="bi bi-plus-circle me-2"></i>Add Group
                </button>
            </div>
        }
    </div>

    <div class="settings-footer">
        <button class="btn btn-primary" @onclick="HandleSave">
            <i class="bi bi-check-circle me-2"></i>Save Changes
        </button>
        <button class="btn btn-outline-secondary" @onclick="HandleCancel">
            Cancel
        </button>
    </div>
</div>

@code {
    [Parameter]
    public int OntologyId { get; set; }

    [Parameter]
    public string? CurrentUserId { get; set; }

    [Parameter]
    public string? Visibility { get; set; }

    [Parameter]
    public bool AllowPublicEdit { get; set; }

    [Parameter]
    public EventCallback<(string visibility, bool allowPublicEdit)> OnSave { get; set; }

    private string visibility = OntologyVisibility.Private;
    private bool allowPublicEdit;
    private List<GroupAccessInfo>? groupAccess;

    protected override async Task OnParametersSetAsync()
    {
        visibility = Visibility ?? OntologyVisibility.Private;
        allowPublicEdit = AllowPublicEdit;

        if (visibility == OntologyVisibility.Group)
        {
            await LoadGroupAccess();
        }
    }

    private Task LoadGroupAccess()
    {
        try
        {
            // TODO: Load actual group access from service
            // For now, using placeholder data
            groupAccess = new List<GroupAccessInfo>();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading group access");
            ToastService.ShowError("Failed to load group access");
        }

        return Task.CompletedTask;
    }

    private async Task HandleSave()
    {
        await OnSave.InvokeAsync((visibility, allowPublicEdit));
    }

    private void HandleCancel()
    {
        visibility = Visibility ?? OntologyVisibility.Private;
        allowPublicEdit = AllowPublicEdit;
    }

    private void ShowAddGroupDialog()
    {
        ToastService.ShowInfo("Group management coming soon");
    }

    private Task RemoveGroupAccess(string groupId)
    {
        if (groupAccess != null)
        {
            groupAccess.RemoveAll(g => g.GroupId == groupId);
            StateHasChanged();
        }

        return Task.CompletedTask;
    }

    // Placeholder model
    private class GroupAccessInfo
    {
        public string GroupId { get; set; } = string.Empty;
        public string GroupName { get; set; } = string.Empty;
        public int MemberCount { get; set; }
        public PermissionLevel PermissionLevel { get; set; }
    }
}
