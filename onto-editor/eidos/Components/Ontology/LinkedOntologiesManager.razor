@using Eidos.Models

<div class="card">
    <div class="card-header">
        <h5 class="mb-0"><i class="bi bi-link-45deg"></i> Linked Ontologies</h5>
    </div>
    <div class="card-body">
        @if (!LinkedOntologies.Any())
        {
            <p class="text-muted mb-0 small">
                <i class="bi bi-info-circle"></i> No linked ontologies yet.
                Import a TTL file that references external ontologies to see them here.
            </p>
        }
        else
        {
            @foreach (var link in LinkedOntologies.OrderBy(l => l.Name))
            {
                <div class="linked-ontology-item mb-2 p-2 border rounded">
                    <div class="d-flex justify-content-between align-items-start">
                        <div class="flex-grow-1">
                            <strong>@link.Name</strong>
                            @if (!string.IsNullOrWhiteSpace(link.Prefix))
                            {
                                <span class="badge bg-primary ms-1">@link.Prefix:</span>
                            }
                            @if (link.ConceptsImported)
                            {
                                <span class="badge bg-success text-white ms-1">
                                    <i class="bi bi-check-circle"></i> @link.ImportedConceptCount imported
                                </span>
                            }
                        </div>
                    </div>
                    @if (!string.IsNullOrWhiteSpace(link.Description))
                    {
                        <p class="mb-1 small text-muted">@link.Description</p>
                    }
                    <div class="small text-muted">
                        <i class="bi bi-link-45deg"></i>
                        <a href="@link.Uri" target="_blank" class="text-muted">@TruncateUri(link.Uri)</a>
                    </div>
                </div>
            }
        }
    </div>
</div>

@code {
    [Parameter, EditorRequired]
    public ICollection<OntologyLink> LinkedOntologies { get; set; } = new List<OntologyLink>();

    private string TruncateUri(string uri)
    {
        if (uri.Length > 50)
        {
            return uri.Substring(0, 47) + "...";
        }
        return uri;
    }
}
