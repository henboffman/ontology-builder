@using Eidos.Models
@using Eidos.Components.Pages

<div class="card">
    <div class="card-header d-flex justify-content-between align-items-center">
        <div>
            <h5 class="mb-0">
                <i class="bi bi-diagram-3"></i> Interactive Graph
                <button class="btn btn-sm btn-link" title="Graph Help" @onclick="() => showGraphHelp = !showGraphHelp">
                    <i class="bi bi-question-circle"></i>
                </button>
            </h5>
            <small class="text-muted">
                Drag nodes to rearrange • Scroll to zoom • Click to select • Ctrl+Click to add relationship
            </small>
        </div>
        <div class="d-flex gap-2">
            <button class="btn btn-sm btn-primary" @onclick="OnAddConceptClick" title="Add a new concept to your ontology"
                    disabled="@(!CanAdd)">
                <i class="bi bi-plus-circle"></i> Add Concept
            </button>
            @if ((FilteredOntology?.Concepts?.Count ?? 0) >= 2)
            {
                <button class="btn btn-sm btn-success" @onclick="OnAddRelationshipClick" title="Create a relationship between concepts"
                        disabled="@(!CanAdd)">
                    <i class="bi bi-arrow-left-right"></i> Add Relationship
                </button>
            }
            @if ((FilteredOntology?.Concepts?.Count ?? 0) > 0)
            {
                <div class="btn-group" title="Color nodes by custom colors or by source ontology">
                    <button class="btn btn-sm btn-outline-secondary" @onclick='() => OnColorModeChanged.InvokeAsync("concept")'
                            disabled="@(ColorMode == "concept")" title="Use custom concept colors">
                        <i class="bi bi-palette"></i> By Concept
                    </button>
                    <button class="btn btn-sm btn-outline-secondary" @onclick='() => OnColorModeChanged.InvokeAsync("source")'
                            disabled="@(ColorMode == "source")" title="Color by source ontology (useful for merged ontologies)">
                        <i class="bi bi-folder"></i> By Source
                    </button>
                </div>

                @if ((FilteredOntology?.Individuals?.Count ?? 0) > 0)
                {
                    <div class="form-check form-switch ms-2">
                        <input class="form-check-input" type="checkbox" id="showIndividualsToggle"
                               checked="@showIndividuals"
                               @onchange="@((ChangeEventArgs e) => OnShowIndividualsChanged((bool)e.Value!))"
                               title="Show individual instances in the graph">
                        <label class="form-check-label" for="showIndividualsToggle">
                            <i class="bi bi-person"></i> Show Individuals
                        </label>
                    </div>
                }
            }
        </div>
    </div>
    <div class="card-body">
        @if (showGraphHelp)
        {
            <div class="alert alert-info alert-dismissible fade show" role="alert">
                <h6 class="alert-heading"><i class="bi bi-lightbulb"></i> Graph View Tips</h6>
                <ul class="mb-0">
                    <li><strong>Drag nodes</strong> to rearrange the graph layout</li>
                    <li><strong>Scroll</strong> to zoom in/out</li>
                    <li><strong>Click a node</strong> to view concept details in the sidebar</li>
                    <li><strong>Ctrl+Click a node</strong> to quickly add a relationship from that concept</li>
                    <li><strong>Color modes</strong> help distinguish between concepts or source ontologies</li>
                </ul>
                <button type="button" class="btn-close" @onclick="() => showGraphHelp = false"></button>
            </div>
        }
        @if (FilteredOntology == null || FilteredOntology.Concepts.Count == 0)
        {
            <div class="text-center p-5">
                <i class="bi bi-diagram-3 display-1 text-muted"></i>
                <h4 class="mt-3">No concepts to visualize</h4>
                <p class="text-muted">Click "Add Concept" above to create your first concept and see it appear in the graph!</p>
                <div class="mt-3">
                    <button class="btn btn-primary" @onclick="OnAddConceptClick" disabled="@(!CanAdd)">
                        <i class="bi bi-plus-circle"></i> Add Your First Concept
                    </button>
                </div>
            </div>
        }
        else if (FilteredOntology?.Concepts?.Count == 0)
        {
            <div class="text-center p-5">
                <i class="bi bi-inbox display-1 text-muted"></i>
                <h4 class="mt-3">No concepts yet</h4>
                <p class="text-muted">Add your first concept to get started</p>
            </div>
        }
        else
        {
            <div class="row">
                <div class="@(ColorMode == "source" ? "col-md-10" : "col-md-12")">
                    <GraphVisualization Ontology="@FilteredOntology" Height="700px" ColorMode="@ColorMode"
                                      ShowIndividuals="@showIndividuals"
                                      OnNodeCtrlClicked="@OnNodeCtrlClicked"
                                      OnNodeClicked="@OnNodeClicked"
                                      OnEdgeClicked="@OnEdgeClicked"
                                      OnIndividualClicked="@OnIndividualClicked"
                                      @ref="graphVisualization" />
                </div>
                @if (ColorMode == "source" && SourceOntologies.Any())
                {
                    <div class="col-md-2">
                        <div class="card h-100">
                            <div class="card-body">
                                <h6 class="card-title small mb-3">Legend</h6>
                                <div class="d-flex flex-column gap-2">
                                    @for (int i = 0; i < SourceOntologies.Count; i++)
                                    {
                                        var source = SourceOntologies[i];
                                        var color = PredefinedColors[i % PredefinedColors.Length];

                                        <div class="d-flex align-items-center gap-2">
                                            <div style="width: 20px; height: 20px; background-color: @color; border-radius: 3px; flex-shrink: 0;"></div>
                                            <small class="text-truncate" title="@source">@source</small>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</div>

@code {
    [Parameter, EditorRequired]
    public Ontology? FilteredOntology { get; set; }

    [Parameter]
    public string ColorMode { get; set; } = "concept";

    [Parameter]
    public List<string> SourceOntologies { get; set; } = new();

    [Parameter]
    public EventCallback OnAddConceptClick { get; set; }

    [Parameter]
    public EventCallback OnAddRelationshipClick { get; set; }

    [Parameter]
    public EventCallback<string> OnColorModeChanged { get; set; }

    [Parameter]
    public EventCallback<int> OnNodeCtrlClicked { get; set; }

    [Parameter]
    public EventCallback<int> OnNodeClicked { get; set; }

    [Parameter]
    public EventCallback<int> OnEdgeClicked { get; set; }

    [Parameter]
    public EventCallback<int> OnIndividualClicked { get; set; }

    [Parameter]
    public bool CanAdd { get; set; } = true;

    private GraphVisualization? graphVisualization;
    private bool showGraphHelp = false;

    /// <summary>
    /// Controls whether individual instances are displayed in the graph alongside concepts.
    /// When enabled, individuals appear as diamond-shaped nodes with dotted borders,
    /// connected to their parent concepts via "instance of" edges.
    /// </summary>
    private bool showIndividuals = false;

    /// <summary>
    /// Handles changes to the "Show Individuals" toggle.
    /// This method ensures proper parameter propagation to the GraphVisualization child component
    /// by forcing a state update and allowing time for Blazor's rendering cycle to complete.
    /// </summary>
    /// <param name="newValue">True to show individuals in the graph, false to hide them</param>
    /// <remarks>
    /// The StateHasChanged() + Task.Delay(10) pattern is critical here because:
    /// 1. StateHasChanged() triggers a re-render of this component
    /// 2. The delay allows Blazor to propagate the ShowIndividuals parameter to GraphVisualization
    /// 3. Only then can RefreshGraph() use the updated parameter value
    /// Without this sequence, RefreshGraph() would use the old parameter value.
    /// </remarks>
    private async Task OnShowIndividualsChanged(bool newValue)
    {
        showIndividuals = newValue;
        StateHasChanged(); // Force Blazor to update the GraphVisualization parameter
        await Task.Delay(10); // Give Blazor time to propagate the parameter change
        if (graphVisualization != null)
        {
            await graphVisualization.RefreshGraph();
        }
    }

    // Predefined color palette for graph nodes - matches CSS variables in themes.css
    // These correspond to: entity, function, quality, attribute, role, process, related, information
    // Note: Dark mode brightness adjustments are handled by CSS when these colors are applied to nodes
    private static readonly string[] PredefinedColors = { "#4A90E2", "#E74C3C", "#6BCF7F", "#F4A261", "#9B59B6", "#E67E22", "#1ABC9C", "#3498DB" };

    public async Task RefreshGraph()
    {
        if (graphVisualization != null)
        {
            await graphVisualization.RefreshGraph();
        }
    }
}
