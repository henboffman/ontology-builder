@using Eidos.Models

<div class="row mb-3">
    <div class="col-md-12 d-flex justify-content-between align-items-center">
        <div class="btn-group" role="group">
            <button class="btn btn-outline-primary" @onclick="() => OnViewModeChanged.InvokeAsync(ViewMode.Graph)"
                    disabled="@(CurrentViewMode == ViewMode.Graph)">
                <i class="bi bi-diagram-3"></i> Graph
            </button>
            <button class="btn btn-outline-primary" @onclick="() => OnViewModeChanged.InvokeAsync(ViewMode.List)"
                    disabled="@(CurrentViewMode == ViewMode.List)">
                <i class="bi bi-list-ul"></i> List
            </button>
            <button class="btn btn-outline-primary" @onclick="() => OnViewModeChanged.InvokeAsync(ViewMode.Hierarchy)"
                    disabled="@(CurrentViewMode == ViewMode.Hierarchy)">
                <i class="bi bi-diagram-2"></i> Hierarchy
            </button>
            <button class="btn btn-outline-primary" @onclick="() => OnViewModeChanged.InvokeAsync(ViewMode.Instances)"
                    disabled="@(CurrentViewMode == ViewMode.Instances)">
                <i class="bi bi-person"></i> Instances
            </button>
            <button class="btn btn-outline-primary" @onclick="() => OnViewModeChanged.InvokeAsync(ViewMode.Ttl)"
                    disabled="@(CurrentViewMode == ViewMode.Ttl)">
                <i class="bi bi-file-code"></i> TTL
            </button>
            <button class="btn btn-outline-primary" @onclick="() => OnViewModeChanged.InvokeAsync(ViewMode.Notes)"
                    disabled="@(CurrentViewMode == ViewMode.Notes)">
                <i class="bi bi-journal-text"></i> Notes
            </button>
            <button class="btn btn-outline-primary" @onclick="() => OnViewModeChanged.InvokeAsync(ViewMode.Templates)"
                    disabled="@(CurrentViewMode == ViewMode.Templates)">
                <i class="bi bi-journal-code"></i> Templates
            </button>
            <button class="btn btn-outline-primary" @onclick="() => OnViewModeChanged.InvokeAsync(ViewMode.Links)"
                    disabled="@(CurrentViewMode == ViewMode.Links)">
                <i class="bi bi-link-45deg"></i> Links
            </button>
            <button class="btn btn-outline-primary" @onclick="() => OnViewModeChanged.InvokeAsync(ViewMode.Collaborators)"
                    disabled="@(CurrentViewMode == ViewMode.Collaborators)">
                <i class="bi bi-people-fill"></i> Collaborators
            </button>
            <button class="btn btn-outline-primary" @onclick="() => OnViewModeChanged.InvokeAsync(ViewMode.Help)"
                    disabled="@(CurrentViewMode == ViewMode.Help)">
                <i class="bi bi-question-circle"></i> Help
            </button>
        </div>

        <div class="btn-group" role="group">
            <button class="btn btn-outline-secondary btn-sm"
                    @onclick="OnUndoClick"
                    disabled="@(!CanUndo)"
                    title="Undo (Ctrl+Z)">
                <i class="bi bi-arrow-counterclockwise"></i> Undo
            </button>
            <button class="btn btn-outline-secondary btn-sm"
                    @onclick="OnRedoClick"
                    disabled="@(!CanRedo)"
                    title="Redo (Ctrl+Y)">
                <i class="bi bi-arrow-clockwise"></i> Redo
            </button>
        </div>
    </div>
</div>

@code {
    [Parameter, EditorRequired]
    public ViewMode CurrentViewMode { get; set; }

    [Parameter]
    public EventCallback<ViewMode> OnViewModeChanged { get; set; }

    [Parameter]
    public bool CanUndo { get; set; }

    [Parameter]
    public bool CanRedo { get; set; }

    [Parameter]
    public EventCallback OnUndoClick { get; set; }

    [Parameter]
    public EventCallback OnRedoClick { get; set; }
}
