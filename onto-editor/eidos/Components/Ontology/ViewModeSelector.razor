@using Eidos.Models

<div class="row mb-3">
    <!-- Desktop Layout -->
    <div class="col-12 d-none d-md-flex justify-content-between align-items-center gap-2">
        <!-- Desktop: View mode buttons -->
        <div class="btn-group" role="group">
            <button class="btn btn-outline-primary" @onclick="() => OnViewModeChanged.InvokeAsync(ViewMode.Graph)"
                disabled="@(CurrentViewMode == ViewMode.Graph)" title="ðŸ’¡ Graph View - Interactive visual diagram of your ontology. Ctrl+Click nodes to quick-add concepts">
                <i class="bi bi-diagram-3"></i>
            </button>
            <button class="btn btn-outline-primary" @onclick="() => OnViewModeChanged.InvokeAsync(ViewMode.List)"
                disabled="@(CurrentViewMode == ViewMode.List)" title="List View - Tabular view with sorting and filtering">
                <i class="bi bi-list-ul"></i>
            </button>
            <button class="btn btn-outline-primary" @onclick="() => OnViewModeChanged.InvokeAsync(ViewMode.Hierarchy)"
                disabled="@(CurrentViewMode == ViewMode.Hierarchy)" title="Hierarchy View - Tree structure showing is-a relationships">
                <i class="bi bi-diagram-2"></i>
            </button>
            <button class="btn btn-outline-primary" @onclick="() => OnViewModeChanged.InvokeAsync(ViewMode.Instances)"
                disabled="@(CurrentViewMode == ViewMode.Instances)" title="Instances - Individual examples of concepts">
                <i class="bi bi-person"></i>
            </button>
            <button class="btn btn-outline-primary" @onclick="() => OnViewModeChanged.InvokeAsync(ViewMode.Ttl)"
                disabled="@(CurrentViewMode == ViewMode.Ttl)" title="Export/View TTL - View RDF/OWL representation">
                <i class="bi bi-file-code"></i>
            </button>
            <button class="btn btn-outline-primary" @onclick="() => OnViewModeChanged.InvokeAsync(ViewMode.Notes)"
                disabled="@(CurrentViewMode == ViewMode.Notes)" title="Notes - Personal documentation and markdown notes">
                <i class="bi bi-journal-text"></i>
            </button>
            <button class="btn btn-outline-primary" @onclick="() => OnViewModeChanged.InvokeAsync(ViewMode.Templates)"
                disabled="@(CurrentViewMode == ViewMode.Templates)" title="Templates - Reusable concept patterns for quick creation">
                <i class="bi bi-journal-code"></i>
            </button>
            <button class="btn btn-outline-primary" @onclick="() => OnViewModeChanged.InvokeAsync(ViewMode.Links)"
                disabled="@(CurrentViewMode == ViewMode.Links)" title="Linked Ontologies - Connections to other ontologies">
                <i class="bi bi-link-45deg"></i>
            </button>
            <button class="btn btn-outline-primary"
                @onclick="() => OnViewModeChanged.InvokeAsync(ViewMode.Collaborators)"
                disabled="@(CurrentViewMode == ViewMode.Collaborators)" title="Collaborators - View who has access and recent activity">
                <i class="bi bi-people-fill"></i>
            </button>
            <button class="btn btn-outline-primary"
                @onclick="() => OnViewModeChanged.InvokeAsync(ViewMode.VersionHistory)"
                disabled="@(CurrentViewMode == ViewMode.VersionHistory)" title="Version History - Track changes and revert if needed">
                <i class="bi bi-clock-history"></i>
            </button>
            <button class="btn btn-outline-primary" @onclick="() => OnViewModeChanged.InvokeAsync(ViewMode.Help)"
                disabled="@(CurrentViewMode == ViewMode.Help)" title="Help - Learn about ontology concepts and usage">
                <i class="bi bi-question-circle"></i>
            </button>
        </div>

        <!-- Desktop: Undo/Redo buttons (aligned right) -->
        <div class="btn-group" role="group">
            <button class="btn btn-outline-info" @onclick="OnUndoClick" disabled="@(!CanUndo)" title="Undo (Ctrl+Z)">
                <i class="bi bi-arrow-counterclockwise"></i>
            </button>
            <button class="btn btn-outline-info" @onclick="OnRedoClick" disabled="@(!CanRedo)" title="Redo (Ctrl+Y)">
                <i class="bi bi-arrow-clockwise"></i>
            </button>
        </div>
    </div>

    <!-- Mobile Layout - Single Row -->
    <div class="col-12 d-md-none d-flex align-items-center gap-2" style="flex-wrap: nowrap;">
        <!-- Mobile: Compact dropdown with icon only -->
        <div class="dropdown flex-grow-1" style="min-width: 0;">
            <button class="btn btn-primary dropdown-toggle w-100 text-truncate" type="button" id="viewModeDropdown"
                data-bs-toggle="dropdown" aria-expanded="false" style="max-width: 100%;">
                <i class="@GetViewModeIcon(CurrentViewMode)"></i>
                <span class="ms-2 d-none d-sm-inline">@GetViewModeName(CurrentViewMode)</span>
            </button>
            <ul class="dropdown-menu" aria-labelledby="viewModeDropdown">
                <li>
                    <button class="dropdown-item @(CurrentViewMode == ViewMode.Graph ? "active" : "")"
                        @onclick="() => OnViewModeChanged.InvokeAsync(ViewMode.Graph)">
                        <i class="bi bi-diagram-3 me-2"></i> Graph
                    </button>
                </li>
                <li>
                    <button class="dropdown-item @(CurrentViewMode == ViewMode.List ? "active" : "")"
                        @onclick="() => OnViewModeChanged.InvokeAsync(ViewMode.List)">
                        <i class="bi bi-list-ul me-2"></i> List
                    </button>
                </li>
                <li>
                    <button class="dropdown-item @(CurrentViewMode == ViewMode.Hierarchy ? "active" : "")"
                        @onclick="() => OnViewModeChanged.InvokeAsync(ViewMode.Hierarchy)">
                        <i class="bi bi-diagram-2 me-2"></i> Hierarchy
                    </button>
                </li>
                <li>
                    <button class="dropdown-item @(CurrentViewMode == ViewMode.Instances ? "active" : "")"
                        @onclick="() => OnViewModeChanged.InvokeAsync(ViewMode.Instances)">
                        <i class="bi bi-person me-2"></i> Instances
                    </button>
                </li>
                <li>
                    <button class="dropdown-item @(CurrentViewMode == ViewMode.Ttl ? "active" : "")"
                        @onclick="() => OnViewModeChanged.InvokeAsync(ViewMode.Ttl)">
                        <i class="bi bi-file-code me-2"></i> TTL
                    </button>
                </li>
                <li>
                    <button class="dropdown-item @(CurrentViewMode == ViewMode.Notes ? "active" : "")"
                        @onclick="() => OnViewModeChanged.InvokeAsync(ViewMode.Notes)">
                        <i class="bi bi-journal-text me-2"></i> Notes
                    </button>
                </li>
                <li>
                    <button class="dropdown-item @(CurrentViewMode == ViewMode.Templates ? "active" : "")"
                        @onclick="() => OnViewModeChanged.InvokeAsync(ViewMode.Templates)">
                        <i class="bi bi-journal-code me-2"></i> Templates
                    </button>
                </li>
                <li>
                    <button class="dropdown-item @(CurrentViewMode == ViewMode.Links ? "active" : "")"
                        @onclick="() => OnViewModeChanged.InvokeAsync(ViewMode.Links)">
                        <i class="bi bi-link-45deg me-2"></i> Links
                    </button>
                </li>
                <li>
                    <button class="dropdown-item @(CurrentViewMode == ViewMode.Collaborators ? "active" : "")"
                        @onclick="() => OnViewModeChanged.InvokeAsync(ViewMode.Collaborators)">
                        <i class="bi bi-people-fill me-2"></i> Collaborators
                    </button>
                </li>
                <li>
                    <button class="dropdown-item @(CurrentViewMode == ViewMode.VersionHistory ? "active" : "")"
                        @onclick="() => OnViewModeChanged.InvokeAsync(ViewMode.VersionHistory)">
                        <i class="bi bi-clock-history me-2"></i> Version History
                    </button>
                </li>
                <li>
                    <button class="dropdown-item @(CurrentViewMode == ViewMode.Help ? "active" : "")"
                        @onclick="() => OnViewModeChanged.InvokeAsync(ViewMode.Help)">
                        <i class="bi bi-question-circle me-2"></i> Help
                    </button>
                </li>
            </ul>
        </div>
    </div>
</div>

@code
{
    [Parameter, EditorRequired]
    public ViewMode CurrentViewMode { get; set; }

    [Parameter]
    public EventCallback<ViewMode> OnViewModeChanged { get; set; }

    [Parameter]
    public bool CanUndo { get; set; }

    [Parameter]
    public bool CanRedo { get; set; }

    [Parameter]
    public EventCallback OnUndoClick { get; set; }

    [Parameter]
    public EventCallback OnRedoClick { get; set; }

    private string GetViewModeIcon(ViewMode mode) => mode switch
    {
        ViewMode.Graph => "bi bi-diagram-3",
        ViewMode.List => "bi bi-list-ul",
        ViewMode.Hierarchy => "bi bi-diagram-2",
        ViewMode.Instances => "bi bi-person",
        ViewMode.Ttl => "bi bi-file-code",
        ViewMode.Notes => "bi bi-journal-text",
        ViewMode.Templates => "bi bi-journal-code",
        ViewMode.Links => "bi bi-link-45deg",
        ViewMode.Collaborators => "bi bi-people-fill",
        ViewMode.VersionHistory => "bi bi-clock-history",
        ViewMode.Help => "bi bi-question-circle",
        _ => "bi bi-diagram-3"
    };

    private string GetViewModeName(ViewMode mode) => mode switch
    {
        ViewMode.Graph => "Graph",
        ViewMode.List => "List",
        ViewMode.Hierarchy => "Hierarchy",
        ViewMode.Instances => "Instances",
        ViewMode.Ttl => "TTL",
        ViewMode.Notes => "Notes",
        ViewMode.Templates => "Templates",
        ViewMode.Links => "Links",
        ViewMode.Collaborators => "Collaborators",
        ViewMode.VersionHistory => "Version History",
        ViewMode.Help => "Help",
        _ => "Graph"
    };
}