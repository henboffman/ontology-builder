@using Eidos.Models

<div class="view-mode-nav">
    <h6 class="text-muted small mb-3">VIEW MODE</h6>

    <div class="nav flex-column gap-1">
        <button class="btn btn-sm @(CurrentViewMode == ViewMode.Graph ? "btn-primary" : "btn-outline-primary") text-start"
                @onclick="() => OnViewModeChanged.InvokeAsync(ViewMode.Graph)">
            <i class="bi bi-diagram-3 me-2"></i> Graph
        </button>

        <button class="btn btn-sm @(CurrentViewMode == ViewMode.List ? "btn-primary" : "btn-outline-primary") text-start"
                @onclick="() => OnViewModeChanged.InvokeAsync(ViewMode.List)">
            <i class="bi bi-list-ul me-2"></i> List
        </button>

        <button class="btn btn-sm @(CurrentViewMode == ViewMode.Hierarchy ? "btn-primary" : "btn-outline-primary") text-start"
                @onclick="() => OnViewModeChanged.InvokeAsync(ViewMode.Hierarchy)">
            <i class="bi bi-diagram-2 me-2"></i> Hierarchy
        </button>

        <button class="btn btn-sm @(CurrentViewMode == ViewMode.Instances ? "btn-primary" : "btn-outline-primary") text-start"
                @onclick="() => OnViewModeChanged.InvokeAsync(ViewMode.Instances)">
            <i class="bi bi-person me-2"></i> Instances
        </button>

        <button class="btn btn-sm @(CurrentViewMode == ViewMode.Ttl ? "btn-primary" : "btn-outline-primary") text-start"
                @onclick="() => OnViewModeChanged.InvokeAsync(ViewMode.Ttl)">
            <i class="bi bi-file-code me-2"></i> TTL
        </button>

        <button class="btn btn-sm @(CurrentViewMode == ViewMode.Notes ? "btn-primary" : "btn-outline-primary") text-start"
                @onclick="() => OnViewModeChanged.InvokeAsync(ViewMode.Notes)">
            <i class="bi bi-journal-text me-2"></i> Notes
        </button>

        <button class="btn btn-sm @(CurrentViewMode == ViewMode.Templates ? "btn-primary" : "btn-outline-primary") text-start"
                @onclick="() => OnViewModeChanged.InvokeAsync(ViewMode.Templates)">
            <i class="bi bi-journal-code me-2"></i> Templates
        </button>

        <button class="btn btn-sm @(CurrentViewMode == ViewMode.Links ? "btn-primary" : "btn-outline-primary") text-start"
                @onclick="() => OnViewModeChanged.InvokeAsync(ViewMode.Links)">
            <i class="bi bi-link-45deg me-2"></i> Links
        </button>

        <button class="btn btn-sm @(CurrentViewMode == ViewMode.Collaborators ? "btn-primary" : "btn-outline-primary") text-start"
                @onclick="() => OnViewModeChanged.InvokeAsync(ViewMode.Collaborators)">
            <i class="bi bi-people-fill me-2"></i> Collaborators
        </button>

        <button class="btn btn-sm @(CurrentViewMode == ViewMode.VersionHistory ? "btn-primary" : "btn-outline-primary") text-start"
                @onclick="() => OnViewModeChanged.InvokeAsync(ViewMode.VersionHistory)">
            <i class="bi bi-clock-history me-2"></i> History
        </button>

        <button class="btn btn-sm @(CurrentViewMode == ViewMode.Help ? "btn-primary" : "btn-outline-primary") text-start"
                @onclick="() => OnViewModeChanged.InvokeAsync(ViewMode.Help)">
            <i class="bi bi-question-circle me-2"></i> Help
        </button>
    </div>

    <!-- Undo/Redo Section -->
    <div class="mt-4">
        <h6 class="text-muted small mb-2">ACTIONS</h6>
        <div class="d-flex gap-1">
            <button class="btn btn-sm btn-outline-info flex-fill"
                    @onclick="OnUndoClick"
                    disabled="@(!CanUndo)"
                    title="Undo (Ctrl+Z)">
                <i class="bi bi-arrow-counterclockwise"></i>
            </button>
            <button class="btn btn-sm btn-outline-info flex-fill"
                    @onclick="OnRedoClick"
                    disabled="@(!CanRedo)"
                    title="Redo (Ctrl+Y)">
                <i class="bi bi-arrow-clockwise"></i>
            </button>
        </div>
    </div>

    <!-- Presence Users Section -->
    @if (PresenceUsers != null && PresenceUsers.Any())
    {
        <div class="mt-4">
            <h6 class="text-muted small mb-2">VIEWING NOW</h6>
            <div class="presence-users-list">
                @foreach (var user in PresenceUsers)
                {
                    <div class="presence-user-item small mb-2">
                        <div class="d-flex align-items-center gap-2">
                            <div class="user-avatar" style="background-color: @user.Color; width: 24px; height: 24px; border-radius: 50%; display: flex; align-items: center; justify-content: center; color: white; font-size: 10px; font-weight: bold;">
                                @user.Initials
                            </div>
                            <div class="flex-grow-1 text-truncate">
                                <div class="fw-semibold text-truncate">@user.DisplayName</div>
                                @if (!string.IsNullOrEmpty(user.CurrentView))
                                {
                                    <div class="text-muted" style="font-size: 0.75rem;">@user.CurrentView</div>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public ViewMode CurrentViewMode { get; set; }
    [Parameter] public EventCallback<ViewMode> OnViewModeChanged { get; set; }
    [Parameter] public bool CanUndo { get; set; }
    [Parameter] public bool CanRedo { get; set; }
    [Parameter] public EventCallback OnUndoClick { get; set; }
    [Parameter] public EventCallback OnRedoClick { get; set; }
    [Parameter] public List<PresenceUserInfo>? PresenceUsers { get; set; }

    public class PresenceUserInfo
    {
        public string DisplayName { get; set; } = "";
        public string Initials { get; set; } = "";
        public string Color { get; set; } = "";
        public string? CurrentView { get; set; }
    }
}
