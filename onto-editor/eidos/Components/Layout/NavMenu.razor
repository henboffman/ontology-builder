@using Eidos.Models
@using Eidos.Services
@using Eidos.Services.Interfaces
@using Eidos.Components.Shared
@using Microsoft.AspNetCore.Components.Authorization
@inject IOntologyService OntologyService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="sidebar-content">
    <div class="sidebar-header">
        <NavLink href="" class="brand-link">
            <span class="brand-icon">
                <i class="bi bi-house-door-fill"></i>
            </span>
            <span class="brand-text">Eidos</span>
        </NavLink>
    </div>

    <div class="sidebar-section">
        <h6 class="sidebar-section-title">
            <i class="bi bi-compass"></i> Navigation
        </h6>
        <div class="nav-links">
            <NavLink href="" class="nav-link-item" Match="NavLinkMatch.All">
                <i class="bi bi-house"></i> Home
            </NavLink>
            <NavLink href="features" class="nav-link-item">
                <i class="bi bi-star-fill"></i> Features
            </NavLink>
            <NavLink href="learn" class="nav-link-item">
                <i class="bi bi-book"></i> Learn About Ontologies
            </NavLink>
            <NavLink href="release-notes" class="nav-link-item">
                <i class="bi bi-megaphone"></i> What's New
            </NavLink>
        </div>
    </div>

    @if (currentUser != null)
    {
        <div class="sidebar-section">
        <h6 class="sidebar-section-title">
            <i class="bi bi-clock-history"></i> Recent Ontologies
        </h6>
        @if (recentOntologies == null)
        {
            <div class="text-center py-3">
                <div class="spinner-border spinner-border-sm text-light" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
        else if (!recentOntologies.Any())
        {
            <div class="empty-state">
                <small>No ontologies yet</small>
            </div>
        }
        else
        {
            <div class="ontology-list">
                @foreach (var ontology in recentOntologies.Take(10))
                {
                    <NavLink href=@($"ontology/{ontology.Id}") class="ontology-item" Match="NavLinkMatch.All">
                        <div class="ontology-item-content">
                            <div class="d-flex justify-content-between align-items-center">
                                <div class="ontology-name text-truncate flex-grow-1">@ontology.Name</div>
                                <small class="text-muted ms-2 text-nowrap">@FormatTimeAgo(ontology.UpdatedAt)</small>
                            </div>
                        </div>
                    </NavLink>
                }
            </div>
        }
        </div>
    }

    <div class="sidebar-footer mt-auto">
        <div class="px-3 pb-2">
            <ThemeToggle ShowLabel="true" @rendermode="InteractiveServer" />
        </div>
        @if (currentUser != null)
        {
            <div class="user-info px-3 py-2 mb-2">
                <small class="text-muted d-block">Signed in as</small>
                <strong class="d-block text-truncate">@currentUser</strong>
            </div>
            <div class="d-grid gap-2">
                <a href="/settings" class="btn btn-outline-light btn-sm">
                    <i class="bi bi-gear"></i> Settings
                </a>
                <a href="/Account/Logout" class="btn btn-outline-light btn-sm">
                    <i class="bi bi-box-arrow-right"></i> Logout
                </a>
            </div>
        }
        else
        {
            <a href="/Account/Login" class="btn btn-primary btn-sm w-100">
                <i class="bi bi-box-arrow-in-right"></i> Login
            </a>
        }
    </div>
</div>

@code {
    private List<Ontology>? recentOntologies;
    private string? currentUser;

    protected override async Task OnInitializedAsync()
    {
        await LoadCurrentUser();

        // Only load ontologies if user is authenticated
        if (currentUser != null)
        {
            await LoadRecentOntologies();
        }
    }

    private async Task LoadRecentOntologies()
    {
        recentOntologies = await OntologyService.GetOntologiesForCurrentUserAsync();
    }

    private async Task LoadCurrentUser()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user?.Identity?.IsAuthenticated == true)
        {
            currentUser = user.Identity.Name;
        }
    }

    private string FormatTimeAgo(DateTime dateTime)
    {
        var timeSpan = DateTime.UtcNow - dateTime;

        if (timeSpan.TotalMinutes < 1)
            return "just now";
        if (timeSpan.TotalMinutes < 60)
            return $"{(int)timeSpan.TotalMinutes}m ago";
        if (timeSpan.TotalHours < 24)
            return $"{(int)timeSpan.TotalHours}h ago";
        if (timeSpan.TotalDays < 7)
            return $"{(int)timeSpan.TotalDays}d ago";
        if (timeSpan.TotalDays < 30)
            return $"{(int)(timeSpan.TotalDays / 7)}w ago";
        if (timeSpan.TotalDays < 365)
            return $"{(int)(timeSpan.TotalDays / 30)}mo ago";

        return $"{(int)(timeSpan.TotalDays / 365)}y ago";
    }
}
